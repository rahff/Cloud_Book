<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" lang="en" xml:lang="en">
<head>
<title>AWS Certified Developer Associate All-in-One Exam Guide (Exam DVA-C01)</title>
<link href="1260460177.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:c4d348f1-9c3d-457f-b76a-654174c9fde1" name="Adept.expected.resource"/>
</head>
<body>
<section epub:type="chapter">
<h2 class="h2c" id="ch16"><span epub:type="pagebreak" id="page_415"/><span class="chap">CHAPTER <span class="chap1">16</span></span></h2>
<h2 class="h2c1">Amazon Simple Workflow Service, Amazon API Gateway, and AWS Step Functions</h2>
<p class="noindent">In this chapter, you will learn</p>
<p class="bulleta">• Amazon Simple Workflow Service</p>
<p class="bulleta">• Amazon API Gateway</p>
<p class="bulleta">• AWS Step Functions</p>
<p class="hr"/>
<p class="noindentb">In this chapter, you will learn how Amazon Simple Workflow Service, Amazon API Gateway, and AWS Step Functions services help you develop and manage distributed applications and services.</p>
<h3 class="h3" id="ch16lev1sec1">Amazon Simple Workflow Service</h3>
<p class="noindent">Amazon Simple Workflow Service (Amazon SWF) helps you build applications that coordinate tasks across distributed components featuring both sequential and parallel processing. A task is the logical unit of work performed by a single component of your application, and you need to coordinate multiple tasks across your application in addition to managing the interdependencies based on the logical flow of the application. Amazon SWF offers full control over implementing and coordinating the tasks without worrying about the complexities of concurrency, scheduling, or tracking the progress. The following are the list of basic steps to develop and run a workflow:</p>
<p class="bullett">• First, you need to develop activity workers that provide the processing steps in your workflow.</p>
<p class="bulleta">• Second, you need to develop a decider that provides coordination logic for your workflow.</p>
<p class="bulleta">• Then you need to register your activities and workflow with Amazon SWF either by using the AWS Management Console or programmatically.</p>
<p class="bulleta">• <span epub:type="pagebreak" id="page_416"/>You can then start your activity workers and deciders. Once started, both will start polling Amazon SWF for the next tasks to perform.</p>
<p class="bulleta">• Then start one or more executions either from the AWS Management Console or programmatically. Each execution runs independently and with its input data, and Amazon SWF schedules the initial decision task. Then your decider begins initiating the next activity tasks until it decides to close the execution.</p>
<p class="bulletb">• You can filter and view the complete details of running and completed workflow executions using the AWS Management Console.</p>
<p class="indent">The Amazon SWF workers perform those tasks that can be run from your on-premises location or from the cloud using Amazon EC2. Distributed application tasks can be long-running—some require restarts, and some may fail or time out—and Amazon SWF tracks each task’s progress using workers and maintains the task’s state until completion. You can deploy, modify, and scale application components independently using Amazon SWF different scenarios that require task coordination, such as business process workflows, web application backends, analytics pipelines, and media processing. There are different ways to implement your workflow solutions using Amazon SWF:</p>
<p class="bullett">• <strong>AWS Software Development Kits (SDKs)</strong>   You can develop your workflow starters, activities, or deciders using the Amazon SWF HTTP application programming interface (API) in any of the supported programming language such as Java, .NET, Node.js, PHP, PHP version 2, Python, or Ruby and expose those libraries. You can also create your own Amazon SWF monitoring and reporting tools by using the access visibility operations through these libraries.</p>
<p class="bulleta">• <strong>AWS Flow Framework</strong>   This provides simple classes for complex distributed and asynchronous programs that run as workflows on Amazon SWF by using Ruby or Java programming languages. With the support of standard object-oriented exception-based error handling, it allows you to use predefined types to map the methods of your program in your workflow directly and allows you to create, debug, and execute using your integrated development environment (IDE) or preferred editor.</p>
<p class="bulleta">• <strong>HTTP Service API</strong>   You can access service operations through HTTP requests, which can be used to communicate with Amazon SWF directly. You can use the HTTP Service API to develop libraries in any programming language that communicates with Amazon SWF using the Hypertext Transfer Protocol (HTTP) protocol.</p>
<h4 class="h4" id="ch16lev2sec1">Development Environment</h4>
<p class="noindent">First you need to set up a development environment based on the programming language that you plan to use. For example, if you intend to use Java to develop for Amazon SWF, then you need to install the AWS Toolkit for Eclipse in addition to installing the Eclipse IDE. For scalability and flexibility, applications are relying on autonomous distributed components and asynchronous processing. Also, application developers can <span epub:type="pagebreak" id="page_417"/>take advantage of cloud computing and have the ability to combine existing on-premises assets with cloud-based assets.</p>
<p class="indent">Developing and executing multiple distributed components involving message queues and databases with the complex logic to synchronize require coordination and might increase latency and unreliability in terms of communication. Amazon SWF provides a programming model and infrastructure to develop asynchronous and distributed applications and let you focus on building applications that your business and clients need.</p>
<p class="bullett">• <strong>Domain</strong>   Amazon SWF provides the structure and components for a workflow, which is a set of activities, and a logic that coordinates all the activities, which runs in an AWS resource called a domain. Domains provide a way of scoping all your Amazon SWF resources. Your AWS account can have multiple domains, and each domain can contain multiple workflows.</p>
<p class="bulleta">• <strong>Actors</strong>   Actors can be workflow starters, deciders, or activity workers that can be developed in any programming language, and Amazon SWF interacts with a number of different types of programmatic actors and communicates its API.</p>
<p class="bulleta">• <strong>Activity</strong>   When you design an Amazon SWF workflow, you can register each activity as an Amazon SWF activity type with name, version, and timeout values. In a workflow some activities may be performed multiple times with different inputs, similar to a customer buying multiple items, and your activity needs to run multiple times.</p>
<p class="bulleta">• <strong>Activity worker</strong>   This can be a program or person that receives activity tasks and provides results after performing those tasks, which can be written in different programming languages and can run on different operating systems.</p>
<p class="bulleta">• <strong>Activity task</strong>   This contains all the information that the activity worker needs to perform its function, either asynchronously or synchronously, and instructs an activity worker to perform its function, like an address change. Activity tasks can be on a single server or distributed across multiple servers in different regions.</p>
<p class="bulleta">• <strong>Activity task lists</strong>   Each activity task list contains multiple activity types, where the tasks are scheduled in order on a best-effort basis, so for some scenarios, the tasks may not come off the list in order.</p>
<p class="bulleta">• <strong>Lambda task</strong>   This is similar to an activity task described earlier and executes a Lambda function instead of an Amazon SWF activity.</p>
<p class="bulleta">• <strong>Decision task</strong>   This contains the current workflow history and notifies the decider when the state of the workflow execution is changed so the decider can determine the next activity to perform. Each activity task is assigned to only one activity worker by Amazon SWF, so no other activity worker can claim or perform that specific task.</p>
<p class="bulleta">• <strong>Decision task lists</strong>   Specific decision task lists are assigned to each workflow execution, and you can specify a default task list when the workflow starter initiates the workflow execution.</p>
<p class="bulleta">• <span epub:type="pagebreak" id="page_418"/><strong>Coordination logic</strong>   The decider schedules activity tasks by providing input to the activity workers, processes events, and closes the workflow when it is completed. Amazon SWF acts as a central hub through which data is exchanged between the decider and the activity workers in addition to maintaining the state of each workflow execution.</p>
<p class="bulleta">• <strong>Workflow starters</strong>   These can be any application that initiates workflow execution.</p>
<p class="bulleta">• <strong>Deciders</strong>   These contain the workflow’s coordination logic that controls the flow of activity tasks in a workflow execution. Whenever a change occurs, like task completion, a task decision with the workflow history will be sent to a decider. The decider analyzes the workflow execution history and determines the next step in the workflow execution and communicates these steps back to Amazon SWF using decisions. The default task list is used when the decider doesn’t specify a task list.</p>
<p class="bulleta">• <strong>Decision</strong>   This is either an action or set of actions in the workflow, like scheduling an activity task. It is used to delay the execution of an activity, to request cancellation of an activity, and to complete or close the workflow.</p>
<p class="bulleta">• <strong>Polling</strong>   This is a method by which activity workers receive activity tasks and the decider receives decision tasks from the Amazon SWF service. Amazon SWF returns the state of the workflow along with the current workflow execution history that has a list of workflow execution events using long polling. If a task is available, Amazon SWF returns the response; if not, it holds the TCP connection open for up to 60 seconds to use the same connection for an upcoming task.</p>
<p class="bulleta">• <strong>Events</strong>   These describe the important changes in the state of the workflow execution, like task completion, timeout, or the expiration of a timer.</p>
<p class="bulleta">• <strong>Workflow type</strong>   This is specified in the call to RegisterWorkflowType and is identified by its name, version, and domain.</p>
<p class="bulleta">• <strong>Activity type</strong>   This is specified in the call to RegisterActivityType and is identified by its name, version, and domain.</p>
<p class="bulleta">• <strong>Workflow execution</strong>   This is specified in the call to StartWorkflowExecution, which then returns run ID, and is identified by the run ID, workflow ID, and domain.</p>
<p class="bulleta">• <strong>Workflow history</strong>   This provides a reliable, complete, and consistent record of the workflow’s progress and every event that occurred since the workflow execution started, which enables applications to be stateless. The workflow execution uses information such as scheduled activities, its current status, and their results to determine the next steps, in addition to providing a detailed audit trail to monitor running workflow executions and validate completed workflow executions.</p>
<p class="bulleta">• <strong>Task routing</strong>   This involves assigning an activity task list to an activity worker. If a task list isn’t specified, the default task list is used.</p>
<p class="bulleta">• <strong>Versioning</strong>   This enables you to have multiple variations of the same workflow or activity running simultaneously, like one for basic users and another version for your premium users, based on your requirements.</p>
<p class="bulleta">• <span epub:type="pagebreak" id="page_419"/><strong>Signals</strong>   These allow you to insert information into a running workflow execution since something has changed or to inform it of an external event.</p>
<p class="bulleta">• <strong>Child workflows</strong>   Use these to break your complicated workflows into smaller, more manageable, and reusable components. A child workflow is initiated by a parent workflow when the decider of the parent workflow uses the StartChildWorkflowExecution decision.</p>
<p class="bulleta">• <strong>Markers</strong>   These enable you to record information that can be used for any custom or application-specific purposes to help implement decider logic.</p>
<p class="bulleta">• <strong>Timers</strong>   These are to delay the execution of an activity task and enable you to notify a decider after a specific time and the decider responds with a StartTimer decision.</p>
<h4 class="h4" id="ch16lev2sec2">Tags</h4>
<p class="noindent">Tags are used for workflow execution when you have many resources. Cost allocation tags are used to organize your AWS bill. You need to assign tags when you start workflow execution because you can’t add, edit, or remove tags after it starts.</p>
<h5 class="h5">Manage Access</h5>
<p class="noindent">You can control access to Amazon SWF using the following two types of permissions:</p>
<p class="bullett">• <strong>Resource permissions</strong>   These determine which Amazon SWF resources a user can access, where the resource permissions apply only to domains.</p>
<p class="bulleta">• <strong>API permissions</strong>   These determine which Amazon SWF actions a user can call, where a user is allowed to call an Amazon SWF action in any domain or deny access to it.</p>
<h5 class="h5">Tag-Based Policies</h5>
<p class="noindent">You can control access based on tags by providing them in the Identity and Access Management (IAM) policy condition. You can create IAM access policies based on tags for Amazon SWF to restrict domains by including a tag with the key and the value to allow or deny access.</p>
<h4 class="h4" id="ch16lev2sec3">Monitoring</h4>
<p class="noindent">You can use CloudWatch to track your workflows and activities and set alarms for the threshold values you choose. Amazon SWF metrics can be viewed using the AWS Management Console, which is measured in milliseconds, or as a count, or as a count per second. You can view graphs for metrics, and you can change the graph parameters using the Time Range controls. You can configure alarm notifications when a particular threshold is reached, like sending notifications to a Simple Notification Service (SNS) topic or sending an e-mail when a certain threshold is reached.</p>
<h4 class="h4" id="ch16lev2sec4"><span epub:type="pagebreak" id="page_420"/>Logging</h4>
<p class="noindent">AWS CloudTrail captures a record of all actions taken by any user, role, or AWS service in Amazon SWF. It captures all API calls for Amazon SWF as events, including calls from the Amazon SWF console and code calls to Amazon SWF API operations. After creating a trail, you can enable continuous delivery of AWS CloudTrail events to an Amazon S3 bucket and find out who made a request to Amazon SWF, from which IP address, and when it was made. You can view the most recent events in the AWS CloudTrail console in Event History.</p>
<h3 class="h3" id="ch16lev1sec2">Amazon API Gateway</h3>
<p class="noindent">The Amazon API Gateway can be used for creating, maintaining, securing, and monitoring WebSocket and REST APIs on a large scale. You can create APIs to access AWS services or for use in your own applications or to create third-party app developers. You can use API Gateway to create HTTP-based REST APIs that adhere to the REST protocol by enabling stateless client-server communication and implement HTTP methods like GET, PUT, DELETE, POST, and PATCH. You can use API Gateway to create WebSocket APIs that adhere to the WebSocket protocol by enabling stateful, full-duplex communication between the client and server and route incoming messages based on message content. API Gateway handles thousands of concurrent API calls in addition to managing access control, authorization, API version management and monitoring, and traffic management. API Gateway is the entry point for your application to any functionality or business logic or to access data from your backend servers or databases. Take advantage of canary release deployments to safely roll out changes in production environments. AWS CloudTrail can be used for logging and monitoring API usage. Amazon CloudWatch can be used for monitoring, access logging, and execution logging, in addition to setting alarms. AWS CloudFormation templates can be used to automate API creation, and you can integrate this with AWS Web Application Firewall (WAF) to protect your API traffic against common web exploits. Amazon API Gateway can be accessed from the AWS Management Console, AWS SDKs, API Gateway APIs, AWS Command Line Interface, and AWS Tools for Windows PowerShell.</p>
<p class="indent">The following is a list of concepts, along with components and use cases, for the Amazon API Gateway:</p>
<p class="bullett">• <strong>Serverless Infrastructure</strong>   You can use AWS Lambda along with the API Gateway to build a serverless application by taking advantage of AWS Lambda that runs your code on a highly available computing infrastructure. AWS Lambda manages the necessary execution and administration of computing resources, and API Gateway supports proxy integrations with HTTP endpoints.</p>
<p class="bulleta">• <strong>REST API</strong>   REpresentational State Transfer (REST) is stateless because it does not store the client session on the server side. It is a collection of HTTP methods integrated with backend HTTP endpoints and Lambda functions. API resources are organized as per the application logic, where each API resource can be exposed as one or more API methods.</p>
<p class="bulleta">• <span epub:type="pagebreak" id="page_421"/><strong>WebSocket API</strong>   This is stateful and is integrated with backend HTTP endpoints and Lambda functions. API methods use the frontend WebSocket connections that are associated with the domain name.</p>
<p class="bulleta">• <strong>API endpoint</strong>   This is a hostname for your API that is deployed in a specific region in the format <a href="http://api-id.execute-api.us-west-1.amazonaws.com">api-id.execute-api.us-west-1.amazonaws.com</a>. The API endpoints can be edge-optimized, private, or regional.</p>
<p class="bulleta">• <strong>API key</strong>   API Gateway uses an alphanumeric string to identify someone who uses your REST or WebSocket API. You can either import it as CSV file, or API Gateway can generate API keys for you that can be used to control access to your APIs or Lambda authorizers.</p>
<p class="bulleta">• <strong>API stage</strong>   This can be identified by the API ID and name refers to a stage in the lifecycle of your REST or WebSocket API, like development, stage, or production.</p>
<p class="bulleta">• <strong>Callback URL</strong>   When your client uses a WebSocket connection, API Gateway stores the client’s callback uniform resource locator (URL). The callback URL is used to send messages to the client from the backend system.</p>
<p class="bulleta">• <strong>Edge-optimized API endpoint</strong>   This is an API Gateway hostname that uses a CloudFront distribution for client access across regions. All API requests are routed to the nearest CloudFront point of presence (POP), which improves connection time for your customers.</p>
<p class="bulleta">• <strong>Integration request</strong>   This is the mapping of a route request of a WebSocket API or the parameters and body of a method request required by the backend REST API method in API Gateway.</p>
<p class="bulleta">• <strong>Integration response</strong>   This is the mapping of the status codes, headers, and payload of the route response of a WebSocket API or REST API method API Gateway returned to a client application.</p>
<p class="bulleta">• <strong>Mapping template</strong>   Velocity Template Language (VTL) helps you transform a request body or response body from the frontend data format to the backend data format, and vice versa, and is used in the integration request or integration response.</p>
<p class="bulleta">• <strong>Method request</strong>   This defines the parameters and body that you send through requests to access the backend using the public interface of a REST API method in API Gateway.</p>
<p class="bulleta">• <strong>Method response</strong>   This defines the headers, body models, and status codes that you receive as responses from the public interface of a REST API.</p>
<p class="bulleta">• <strong>Mock integration</strong>   As a developer, you want to verify API responses that are generated from API Gateway directly before you develop an integration backend code. Based on the mock integration results, you can configure the method’s integration request and response.</p>
<p class="bulleta">• <span epub:type="pagebreak" id="page_422"/><strong>Model</strong>   This is a data schema defining and validating the structure of a request or response payload and is used for generating a strongly typed SDK of an API. You can generate a sample mapping template by initiating the creation of another mapping template for another environment, like production.</p>
<p class="bulleta">• <strong>Private API endpoint</strong>   An API endpoint allows a client to securely access private API resources inside a Virtual Private Cloud (VPC) through interface VPC endpoints. It is isolated from the public Internet and can only be accessed if you have required access through VPC endpoints for API Gateway.</p>
<p class="bulleta">• <strong>Private integration</strong>   The resources are inside a customer’s VPC and can only be accessed through a private REST API endpoint without exposure to the public Internet.</p>
<p class="bulleta">• <strong>Proxy integration</strong>   You can set up API Gateway proxy integration configuration for a REST or WebSocket API as either HTTP proxy integration or Lambda proxy integration. The API Gateway passes the entire request and response between the frontend and an HTTP backend for the HTTP proxy integration and sends the entire request as input to a backend Lambda function for the Lambda proxy integration, where API Gateway transforms the Lambda function output to a frontend HTTP response.</p>
<p class="bulleta">• <strong>Regional API endpoint</strong>   You can deploy the hostname of an API in a specific AWS region to serve its clients. You can direct your API request target directly to the region-specific API Gateway without going through any CloudFront distribution. A regional endpoint bypasses the unnecessary round trip to a CloudFront distribution of your in-region requests.</p>
<p class="bulleta">• <strong>Route</strong>   In API Gateway, WebSocket routes the incoming messages to a specific integration based on the message content. You need to specify a route key, which is a message body attribute, and an integration backend. The integration backend is invoked when the route key is matched in the incoming message.</p>
<p class="bulleta">• <strong>Route request</strong>   This is a request body that access the backend through the public interface of a WebSocket API method in API Gateway.</p>
<p class="bulleta">• <strong>Route response</strong>   The response status codes and headers received through the public interface of a WebSocket API from API Gateway.</p>
<p class="bulleta">• <strong>Usage plan</strong>   You can enforce throttling and quota limits on individual client API keys through a usage plan when accessing REST or WebSocket APIs.</p>
<p class="bulleta">• <strong>WebSocket connection</strong>   This is a persistent connection that API Gateway maintains between clients and API Gateway based on the message content received from clients.</p>
<p class="bulleta">• <strong>Pricing</strong>   You are not charged for authorization and authentication failures for calls to methods with the authorization type of CUSTOM, COGNITO_USER_POOLS, and AWS_IAM. You are not charged when API keys are missing or invalid for calling methods that require API keys. You are not charged when the request rate or burst rate exceeds the preconfigured limits in API Gateway–throttled requests. <span epub:type="pagebreak" id="page_423"/>You are not charged when rate limits or quotas exceed the preconfigured limits for usage plan–throttled requests.</p>
<p class="bulleta">• <strong>PCI DSS</strong>   API Gateway is compliant with the Payment Card Industry (PCI) Data Security Standard (DSS).</p>
<p class="bulleta">• <strong>HIPAA</strong>   API Gateway is a Health Insurance Portability and Accountability Act (HIPAA)–eligible service.</p>
<h4 class="h4" id="ch16lev2sec5">REST API</h4>
<p class="noindent">The REST API contains resources and methods, where resource is a logical entity that is accessed by an application through a resource path, the method represents the REST API request submitted by the user, and the response is returned to the user. A combination of a resource path and operations like GET, PUT, DELETE, and POST identify a method of the API. For example, a POST /address method could add an address of the user and GET /address method could query the current address of the user. Your application does not need to know where the data requested is stored and fetched from on the backend—it can be on the Amazon RDS or DynamoDB database. The frontend is encapsulated by method requests and method responses in the API Gateway REST APIs, and similarly the backend is encapsulated by integration requests and integration responses.</p>
<p class="indent">API Gateway provides REST API management functionality for generating SDKs and creating API documentation using API Gateway extensions to OpenAPI. You can use API Gateway to create WebSocket APIs and throttle HTTP requests. The client and the server can send messages at any time to each other using WebSocket API. You can avoid implementing complex polling mechanisms for connecting users and devices with your backend servers. You can build a serverless application to send and receive messages to and from individual users or groups of users in a chat room using an API Gateway WebSocket API and AWS Lambda. You also can use API Gateway WebSocket APIs to build real-time communication applications without having to provision or manage any servers to control connections or large-scale data exchanges.</p>
<p class="indent">An API developer requires IAM permissions to create and deploy an API and to enable the required functionality in API Gateway. The application developer is the customer of the API developer, who takes advantage of WebSocket or REST API developed in API Gateway for building application functions. An API developer uses the API Gateway service to create and deploy an API that includes a set of resources and methods by using the API Gateway console, using API Gateway V1/V2 API, using AWS CLI, or by using an AWS SDK in addition to using AWS CloudFormation templates. An application developer uses execute-api to invoke an API that was created or deployed in API Gateway where the underlying programming entities are exposed.</p>
<h4 class="h4" id="ch16lev2sec6">API with Lambda Integration</h4>
<p class="noindent">You can use either Lambda proxy integration or nonproxy integration to build an API with Lambda integrations. The input for the Lambda function can be request headers, query string parameters, path variables, and the body in addition to using API configuration to influence the execution logic in the proxy. The integration request and integration <span epub:type="pagebreak" id="page_424"/>response are configured by API Gateway for you without modifying the existing settings. You must ensure that input to the Lambda function is supplied as the integration request payload in the nonproxy integration. Here you need to map any input data the client supplied as request parameters into the proper integration request body in addition to translating the client-supplied request body into a format recognized by the Lambda function.</p>
<h4 class="h4" id="ch16lev2sec7">Create a REST API</h4>
<p class="noindent">You can build a REST API, which is a collection of programmable entities, by using Amazon API Gateway resources. The Resource entity can have one or more Method resources represented in the request parameters and body, where a Method defines the API for the client to access any incoming requests submitted. You can forward the incoming request to a specified integration endpoint uniform resource identifier (URI) and create an integration resource to integrate the Method with a backend integration endpoint. The request parameters or body can be transferred to meet the backend requirements. You then create a MethodResponse resource to represent the request response received by the client, and you create an IntegrationResponse resource representing the request response returned by the backend. You can either transform the backend response data or pass the backend response as-is to the client.</p>
<p class="indent">You can also provide documentation for the API to help your customers understand it by adding a DocumentationPart resource. IAM permissions, Amazon Cognito, or a Lambda authorizer can be used to control how clients call an API. You can set up usage plans to throttle API requests to meter the use of your API when creating or updating it. All these tasks can be performed using the API Gateway console, the AWS CLI, the API Gateway REST API, or one of the AWS SDKs. You can manage an API by viewing, updating, and deleting the existing setups. You can update an API by modifying resource properties or configuration settings. You need to redeploy the API when you update resource properties, but you don’t need to redeploy APIs for configuration updates.</p>
<p class="indent">You can call the API by submitting requests to the URL for the API Gateway using execute-api. The REST APIs base URL format is</p>
<p class="imagep"><img alt="images" src="p0424-01.jpg"/></p>
<p class="indent">The {restapi_id} represents the API identifier, and {stage_name} represents the stage name of the API deployment. You can publish your deployed APIs using a developer portal or sell your APIs as Software as a Service (SaaS) through the AWS Marketplace. AWS Config can be used to record all the configuration changes made to your API Gateway API resources and send you or your team notifications based on these changes. It is very useful to maintain the history of configuration changes for operational audit, troubleshooting, and compliance use cases. You can also use the AWS Config Rules feature to define configuration rules that automatically detect, alert, and track rule violations. You can use tags, which is metadata consisting of a key and value, and both are case-sensitive. You can control access to your API resources based on the tags specified in AWS IAM policy conditions. Also, tags are used to track your AWS costs by categorizing them and delivering a monthly allocation report.</p>
<h3 class="h3" id="ch16lev1sec3"><span epub:type="pagebreak" id="page_425"/>AWS Step Functions</h3>
<p class="noindent">AWS Step Functions help you coordinate multiple components of distributed applications and microservices using visual workflows. You can build an application that performs an isolated function and you can scale applications quickly. You can coordinate components and step through the functions using a graphical console to visualize the components as a series of steps. Step Function logs the state of each step and automatically tracks errors so your application execute as expected each time. As a result, you can diagnose and debug problems quickly if things go wrong. In order to ensure that your application is available at any scale, Step Functions manages the operations and underlying infrastructure for you. You can access and use Step Functions by using the Step Functions console, the AWS SDKs, or an HTTP API. Step Functions is based on the tasks and state machines that you define using the JSON language. The console of Step Functions displays a graphical view of your state machine’s structure and provides a way to visually check your state machine’s logic and monitor executions. Step Functions integrates with other AWS services, so you can use API actions and coordinate executions directly.</p>
<h4 class="h4" id="ch16lev2sec8">Standard Workflows</h4>
<p class="noindent">You need to select a type of workflow—either Standard or Express—during the creation of a new state machine using the Amazon States Language. Based on the type, your state machine executions will behave differently, and the type cannot be changed after the state machine is created. Standard workflows are ideal for durable, long-running, and auditable workflows. They run for up to a year and allow you to retrieve the full execution history for up to 90 days using the Step Functions API. Standard workflows have just-once workflow execution, whereas Express workflows have at-least-once workflow execution. Standard workflows always run from beginning to end, and the execution state is internally persisted on every state transition, and every execution will be run exactly once. Only one execution will start even if you attempt to start a Standard workflow with the same name more than once.</p>
<h4 class="h4" id="ch16lev2sec9">Express Workflows</h4>
<p class="noindent">Express workflows are suitable for high-volume event processing workloads and enable cost-effective processing for short-duration, high-event-rate workloads. When logging is enabled for an express workflow, it can be monitored and analyzed using Amazon CloudWatch logs. Express workflows have no internally persistent state to monitor the progress of executions and cannot guarantee that one execution will run only once. You can attempt to start executions concurrently when you start an express workflow with the same name more than once, and each runs at least once. You need to make sure your state machine logic is idempotent and will not be affected adversely by multiple concurrent executions of the same input when using express workflows.</p>
<h4 class="h4" id="ch16lev2sec10">Standard vs. Express Workflows</h4>
<p class="noindent">Standard workflows use an at-most-once model, where your tasks and states are never executed more than once, which makes it suited to orchestrating nonidempotent actions. The executions are billed according to the number of state transitions processed. Both standard and express workflows can start automatically in response to events.</p>
<p class="indent"><span epub:type="pagebreak" id="page_426"/>Express workflows are used for high-volume workloads, which run for up to five minutes and store the execution history in Amazon CloudWatch logs. Express workflows use the at-least-once model, where an execution might be run more than once, which makes express workflows ideal for orchestrating idempotent actions, and it is billed based on the duration of execution, memory consumed, and total number of executions.</p>
<h4 class="h4" id="ch16lev2sec11">Step Functions Local</h4>
<p class="noindent">AWS Step Functions state machines can be implemented in several ways, including the Management Console and the SDKs. You can also install and run Step Functions on your local machine for testing and development purposes. You can start an execution on any machine using Step Functions Local. The local version of Step Functions can invoke AWS Lambda functions running both on AWS and locally. You can also coordinate other supported AWS services. You can use the downloadable version of AWS Step Functions that runs on Windows, Linux, and macOS, and you need to install the AWS CLI. Download and install Step Functions and then open a command prompt window, navigate to the directory where you extracted StepFunctionsLocal.jar, and enter the following command:</p>
<p class="imagep"><img alt="images" src="p0426-01.jpg"/></p>
<p class="indent">You can access Step Functions running locally using the following command:</p>
<p class="imagep"><img alt="images" src="p0426-02.jpg"/></p>
<p class="indent">First you need to create a simple state machine using two Pass states, which means an instruction with no operation, by using the predefined state machine Hello World template.</p>
<h5 class="h5">Amazon States Language</h5>
<p class="noindent">Amazon States Language is a structured JSON-based language that defines the state machine, a collection of states, task states, choice states, and fail states.</p>
<h5 class="h5">Step Functions Console</h5>
<p class="noindent">A state machine can be defined using the Step Functions console. Complex state machines can be developed in the cloud by using AWS Lambda and the Step Functions console to define your state machine.</p>
<h5 class="h5">AWS SDKs</h5>
<p class="noindent">You can develop Step Functions state machines, activities, or starters using the AWS SDKs for Java, PHP, .NET, Python, Ruby, Go, C++, and JavaScript. These SDKs offer a convenient way to develop the Step Functions in various programming languages and access visibility operations to develop your own Step Functions reporting tools and monitoring.</p>
<h5 class="h5"><span epub:type="pagebreak" id="page_427"/>HTTPS Service API</h5>
<p class="noindent">Step Functions offers service operations through HTTPS requests to communicate directly with Step Functions to develop libraries in any language. The service API actions can be used to develop state machines, state machine starters, and workers in addition to accessing visibility operations to develop your own reporting and monitoring tools.</p>
<h5 class="h5">Templates in Step Functions</h5>
<p class="noindent">You can choose state machine templates from the Step Functions console to automatically fill the Code pane. You can use any of following blueprints as the template, and every template is fully functional:</p>
<p class="bullett">• <strong>Hello world</strong>   A state machine with a Pass state.</p>
<p class="bulleta">• <strong>Wait state</strong>   A state machine that shows different methods of injecting a Wait state.</p>
<p class="bulleta">• <strong>Retry failure</strong>   A state machine that retries a task after the task fails.</p>
<p class="bulleta">• <strong>Parallel</strong>   A state machine that shows how to run two branches at the same time.</p>
<p class="bulleta">• <strong>Catch failure</strong>   A state machine that shows how to call different tasks depending on the failure type of its primary task.</p>
<p class="bulleta">• <strong>Choice state</strong>   A state machine that makes a choice to run either a Task state or a Fail state.</p>
<p class="bulleta">• <strong>Map state</strong>   A state machine that uses a map state to dynamically process the data in an array.</p>
<h5 class="h5">States</h5>
<p class="noindent">Individual states can be used to make decisions, perform actions, and pass output to other states. States are elements referred to be name, which must be unique within the scope of the entire state machine. In AWS Step Functions the workflows are defined in the JSON Amazon States Language. The Step Functions console helps you visualize your application logic by using the graphical representation of the state machine. A variety of functions can be performed in your state machine by using states:</p>
<p class="bullett">• <strong>Task state</strong>   Does some work in your state machine</p>
<p class="bulleta">• <strong>Choice state</strong>   Makes a choice between branches of execution</p>
<p class="bulleta">• <strong>Fail or Succeed state</strong>   Stops an execution with a success or failure</p>
<p class="bulleta">• <strong>Pass state</strong>   Passes its input to its output or injects some data</p>
<p class="bulleta">• <strong>Wait state</strong>   Provides a delay for a certain amount of time</p>
<p class="bulleta">• <strong>Parallel state</strong>   Begins parallel branches of execution</p>
<p class="bulletb">• <strong>Map state</strong>   Dynamically iterates steps</p>
<p class="indent"><span epub:type="pagebreak" id="page_428"/>These are the state fields:</p>
<p class="bullett">• <strong>Type</strong>   The state’s type</p>
<p class="bulleta">• <strong>Next</strong>   The name of the next state that is run when the current state finishes</p>
<p class="bulleta">• <strong>End</strong>   Ends the execution when set to true</p>
<p class="bulleta">• <strong>Comment</strong>   Contains a description of the state</p>
<p class="bulleta">• <strong>InputPath</strong>   A path that selects a portion of the state’s input to be passed for processing</p>
<p class="bulleta">• <strong>OutputPath</strong>   A path that selects a portion of the state’s input to be passed to the output</p>
<h4 class="h4" id="ch16lev2sec12">Tagging</h4>
<p class="noindent">You can tag state machines of both standard and express workflows and activities to track and manage the costs associated with the resources. When defining cost allocation tags, you can add metadata that identifies the purpose of a state machine or activity to organize your AWS bill and reflect the cost structure. You can control access to resources based on tags by providing the tags in the condition of an IAM policy.</p>
<h4 class="h4" id="ch16lev2sec13">Monitoring</h4>
<p class="noindent">You can use AWS CloudWatch to monitor the availability and performance of AWS Step Functions by collecting monitoring data to debug any multipoint failures. As a first step to monitor Step Functions, you need to store historical monitoring data for a baseline to compare against current performance data, to identify performance anomalies. The metrics represent the stages of your execution, activity, and Lambda function timeouts, with descriptive names. You can configure CloudWatch events for status changes in Step Functions execution to monitor your workflows without having to constantly poll.</p>
<h4 class="h4" id="ch16lev2sec14">Logging</h4>
<p class="noindent">AWS CloudTrail provides data about the actions taken by a user, role, or AWS service in Step Functions by capturing all API calls of Step Functions as events. You can enable continuous delivery of Step Functions CloudTrail events to an Amazon S3 bucket using a trail. However, you can view the events in the console if you didn’t configure a trail. CloudTrail logs are used to find the requests made to Step Functions, the IP address of the request, who made the request, and when. CloudTrail logs are not an ordered trace of API calls, so they may not appear in any specific order. You need to configure Amazon CloudWatch logs to see the execution history and results of your express workflow, and logs don’t block or slow down executions.</p>
<h4 class="h4" id="ch16lev2sec15">Security</h4>
<p class="noindent">AWS recommends protecting AWS account credentials and setting up individual user accounts with AWS IAM, so that each user is given only the permissions necessary to <span epub:type="pagebreak" id="page_429"/>fulfill their job duties. You need to enable multifactor authentication (MFA) for each account and use Secure Sockets Layer/Transport Layer Security (SSL/TLS) to communicate with your AWS resources. Configure API and user activity logging with AWS CloudTrail, and use AWS encryption solutions. AWS strongly recommends you never put sensitive identifying information, such as your customers’ personal information, into free-form fields. Any data that you enter into Step Functions might get picked up for inclusion in diagnostic logs, so never include credentials information in the URL to validate your request to that server.</p>
<h5 class="h5">Encryption at Rest</h5>
<p class="noindent">Your data at rest in Step Functions is always encrypted using server-side encryption, which reduces the operational burden and complexity involved in protecting sensitive data because AWS manages it for you. You can build security-sensitive applications that meet encryption compliance and regulatory requirements with encryption at rest.</p>
<h5 class="h5">Encryption in Transit</h5>
<p class="noindent">The data in transit between Step Functions and integrated services is encrypted in Step Functions using TLS.</p>
<h5 class="h5">Amazon VPC Endpoints</h5>
<p class="noindent">Amazon VPC endpoints enable you to establish a private connection between your Amazon VPC and AWS Step Functions workflows without crossing the public Internet. Amazon VPC controls network settings like the IP address range, subnets, and route tables.</p>
<h3 class="h3" id="ch16lev1sec4">Chapter Review</h3>
<p class="noindent">This chapter began by explaining Amazon Simple Workflow Service concepts. It then explained how to build applications that coordinate tasks across distributed components featuring both sequential and parallel processing. Then the chapter described tasks, which are the logical units of work of your application, and explained how to coordinate multiple tasks across applications. Amazon SWF workers can run either from your on-premises setup or from the cloud using Amazon EC2. Distributed application tasks can be long-running—some require restarts and some tasks may fail or time out. Amazon SWF tracks each task’s progress using workers and maintains the task’s state until it is complete.</p>
<p class="indent">The Amazon API Gateway can be used for creating, maintaining, securing, and monitoring WebSocket and REST APIs. Use API Gateway to create HTTP-based REST APIs that adhere to the REST protocol by enabling stateless client-server communication and implement HTTP methods like GET, PUT, DELETE, POST, and PATCH. You can use API Gateway to create WebSocket APIs that adhere to the WebSocket protocol by enabling stateful, full-duplex communication between the client and server and route the incoming messages based on content. API Gateway is the entry point for your application to any functionality, business logic, or to access data from your backend servers or databases. Take advantage of canary release deployments to safely roll out changes in production environments.</p>
<p class="indent"><span epub:type="pagebreak" id="page_430"/>AWS Step Functions is used to coordinate multiple components of distributed applications using visual workflows. You can build an application that performs an isolated function and allows you to scale applications quickly. You can coordinate components and step through the functions using a graphical console to visualize the components as a series of steps. Step Functions logs the state of each step and automatically tracks errors so your application executes as expected each time. However, you can diagnose and debug problems quickly if things go wrong. The console of Step Functions displays a graphical view of your state machine’s structure and provides a way to visually check your logic and monitor executions. Step Functions integrates with other AWS services, so you can use API actions and coordinate executions directly.</p>
<h4 class="h4" id="ch16lev2sec16">Exercises</h4>
<p class="noindent">The following exercises will help you practice working with Amazon Simple Workflow Service, Amazon API Gateway, and AWS Step Functions. You need to create an AWS account, as explained earlier, to perform these exercises. You can use the Free Tier when launching AWS resources, but make sure to terminate them at the end.</p>
<h5 class="h5">Exercise 16-1: Create Amazon SWF Domain Using AWS Management Console</h5>
<p class="numbert"><strong>1.</strong> Use your AWS account e-mail address and password to sign in and then navigate to the Amazon Simple Workflow Service console at <a href="https://console.aws.amazon.com/swf/">https://console.aws.amazon.com/swf/</a>.</p>
<p class="number"><strong>2.</strong> Verify the AWS region by using the Region selector in the upper-right corner of the page.</p>
<p class="number"><strong>3.</strong> From the Welcome To AWF page, choose Create A New Domain.</p>
<p class="number"><strong>4.</strong> In the popup window, for Name enter <strong>my-swf-domain</strong>, for Workflow Execution Retention Period, enter <strong>3 days</strong>, and for description, enter <strong>this is my swf domain used for testing with an expiration of 3 days</strong>.</p>
<p class="number"><strong>5.</strong> Click the Register button.</p>
<p class="number"><strong>6.</strong> Once successful, you will receive a message that the domain was successfully registered.</p>
<h5 class="h5">Exercise 16-2: Register a Workflow Type Using the AWS Management Console</h5>
<p class="numbert"><strong>1.</strong> Use your AWS account e-mail address and password to sign in and then navigate to the Amazon Simple Workflow Service console at <a href="https://console.aws.amazon.com/swf/">https://console.aws.amazon.com/swf/</a>.</p>
<p class="number"><strong>2.</strong> Verify the AWS region by using the Region selector in the upper-right corner of the page.</p>
<p class="number"><strong>3.</strong> <span epub:type="pagebreak" id="page_431"/>From the Amazon Simple Workflow Service Dashboard, click on Workflow Type from the pane on the left.</p>
<p class="number"><strong>4.</strong> From the My Workflow Types page, select the domain from the dropdown.</p>
<p class="number"><strong>5.</strong> Click on Register New to register a new workflow type.</p>
<p class="number"><strong>6.</strong> From the popup menu, make sure the domain is selected and enter <strong>my-workflow-type</strong> for the Workflow Type Name.</p>
<p class="number"><strong>7.</strong> For the Workflow Type Version, enter <strong>0.1</strong>.</p>
<p class="number"><strong>8.</strong> For the Default Task List, enter <strong>TL1</strong>.</p>
<p class="number"><strong>9.</strong> For the Default Execution Start To Close Timeout, enter <strong>10 minutes</strong>.</p>
<p class="number1"><strong>10.</strong> For the Default Task Start To Close Timeout enter <strong>5 minutes</strong>.</p>
<p class="number1"><strong>11.</strong> Click on the Continue button.</p>
<p class="number1"><strong>12.</strong> In the next popup window, for the Default Task Priority, enter <strong>100</strong>.</p>
<p class="number1"><strong>13.</strong> For the Description enter <strong>this is my workflow type with version 0.1 and priority 100</strong>.</p>
<p class="number1"><strong>14.</strong> For the Default Child Policy enter <strong>Terminate</strong>.</p>
<p class="number1"><strong>15.</strong> Choose Default Lambda Role or enter the role if you have one available.</p>
<p class="number1"><strong>16.</strong> Click on Review.</p>
<p class="number1"><strong>17.</strong> Review all the values and click on Register Workflow.</p>
<h5 class="h5">Exercise 16-3: Register an Activity Type Using the AWS Management Console</h5>
<p class="numbert"><strong>1.</strong> Use your AWS account e-mail address and password to sign in and then navigate to the Amazon Simple Workflow Service console at <a href="https://console.aws.amazon.com/swf/">https://console.aws.amazon.com/swf/</a>.</p>
<p class="number"><strong>2.</strong> Verify the AWS region by using the Region selector in the upper-right corner of the page.</p>
<p class="number"><strong>3.</strong> From the Amazon Simple Workflow Service Dashboard, click on Activity Type from the pane on the left.</p>
<p class="number"><strong>4.</strong> From the My Activity Types page, select the domain from the dropdown.</p>
<p class="number"><strong>5.</strong> Click on Register New to register a new activity type.</p>
<p class="number"><strong>6.</strong> From the popup menu, make sure the domain is selected and for the Activity Type Name, enter <strong>my-activity-type</strong>.</p>
<p class="number"><strong>7.</strong> For the Activity Type Version, enter <strong>0.1</strong>.</p>
<p class="number"><strong>8.</strong> For the Task List, enter <strong>TL1</strong>.</p>
<p class="number"><strong>9.</strong> For the Task Priority, enter <strong>100</strong>.</p>
<p class="number1"><strong>10.</strong> For the Task Schedule To Start Timeout, enter <strong>10 minutes</strong>.</p>
<p class="number1"><strong>11.</strong> <span epub:type="pagebreak" id="page_432"/>For the Task Start To Close Timeout, enter <strong>5 minutes</strong>.</p>
<p class="number1"><strong>12.</strong> Click on the Continue button.</p>
<p class="number1"><strong>13.</strong> In the next popup window, for the Description, enter <strong>this is my activity type with version 0.1 and priority 100</strong>.</p>
<p class="number1"><strong>14.</strong> For the Heartbeat Timeout, enter <strong>30 seconds</strong>.</p>
<p class="number1"><strong>15.</strong> For the Task Schedule To Close Timeout, enter <strong>60 minutes</strong>.</p>
<p class="number1"><strong>16.</strong> Click on Review.</p>
<p class="number1"><strong>17.</strong> Review all the values and click on Register Activity.</p>
<h4 class="h4" id="ch16lev2sec17">Questions</h4>
<p class="noindent">The following questions will help you gauge your understanding of the contents in this chapter. Read all the answers carefully because there might be more than one correct answer. Choose the best response for each question.</p>
<p class="numbert"><strong><a href="ch16.xhtml#rch16qa1" id="ch16qa1">1.</a></strong> Your application team plans to develop an asynchronous program using simple programming constructs for initiating tasks to run remotely and track the program’s runtime state. They also want to maintain the application execution state without using databases or ad hoc solutions. Which AWS service is suitable for this use case?</p>
<p class="alphau"><strong>A.</strong> Amazon S3</p>
<p class="alphau"><strong>B.</strong> AWS CodeStar</p>
<p class="alphau"><strong>C.</strong> Amazon SWF</p>
<p class="alphau"><strong>D.</strong> AWS Snowball</p>
<p class="number"><strong><a href="ch16.xhtml#rch16qa2" id="ch16qa2">2.</a></strong> Amazon allows developers to access the Amazon Simple Workflow Service in different ways to make it easy for development and management. Which of the following ways are possible to access Amazon SWF? (Choose all that apply.)</p>
<p class="alphau"><strong>A.</strong> AWS Management Console</p>
<p class="alphau"><strong>B.</strong> AWS SDK for Java, .NET, PHP, and Ruby</p>
<p class="alphau"><strong>C.</strong> Amazon SWF web service APIs</p>
<p class="alphau"><strong>D.</strong> AWS Flow Framework for Java</p>
<p class="number"><strong><a href="ch16.xhtml#rch16qa3" id="ch16qa3">3.</a></strong> You want your developers to be able to quickly create APIs and reduce development effort and time-to-market for your applications. You want to automatically meter the API traffic and extract utilization data for each API key. Your developers should be able to build and test new versions of APIs to add new functionality, allowing multiple API versions to operate simultaneously. Which Amazon service is suitable in this scenario?</p>
<p class="alphau"><strong>A.</strong> Amazon API Gateway</p>
<p class="alphau"><strong>B.</strong> AWS Storage Gateway</p>
<p class="alphau"><strong>C.</strong> <span epub:type="pagebreak" id="page_433"/>AWS Elastic Beanstalk</p>
<p class="alphau"><strong>D.</strong> Amazon Polly</p>
<p class="number"><strong><a href="ch16.xhtml#rch16qa4" id="ch16qa4">4.</a></strong> You want to create an API by taking advantage of Amazon API Gateway, which offers a few options to create APIs. What the types of APIs are supported by Amazon API Gateway? (Choose three.)</p>
<p class="alphau"><strong>A.</strong> REST API</p>
<p class="alphau"><strong>B.</strong> HTTP API</p>
<p class="alphau"><strong>C.</strong> WebSocket API</p>
<p class="alphau"><strong>D.</strong> SOAP API</p>
<p class="number"><strong><a href="ch16.xhtml#rch16qa5" id="ch16qa5">5.</a></strong> You interact with a number of different types of programmatic actors that communicate with Amazon SWF through its API, which can be developed in any programming language. Which of the following are actors in Amazon SWF?</p>
<p class="alphau"><strong>A.</strong> Domains</p>
<p class="alphau"><strong>B.</strong> Deciders</p>
<p class="alphau"><strong>C.</strong> Activity workers</p>
<p class="alphau"><strong>D.</strong> Workflow starters</p>
<p class="number"><strong><a href="ch16.xhtml#rch16qa6" id="ch16qa6">6.</a></strong> Your development team wants to adopt a strategy where both the new version of an API and a base API version are deployed in a production environment to support normal operations. After completing enough testing, the new API can be promoted to the production environment, which makes the new features available in the production stage without much impact to your end users. Which of the following release strategies should your application adopt for the production release?</p>
<p class="alphau"><strong>A.</strong> Rolling deployment</p>
<p class="alphau"><strong>B.</strong> Blue green deployment</p>
<p class="alphau"><strong>C.</strong> Red black deployment</p>
<p class="alphau"><strong>D.</strong> Canary development</p>
<p class="number"><strong><a href="ch16.xhtml#rch16qa7" id="ch16qa7">7.</a></strong> You want to use a managed service that coordinates distributed application components by using visual workflows that let you scale easily and change applications quickly. You need to step through the functions of your application and visualize the components as a series of steps. You should be able to change or add steps without writing code. Which of the following AWS services is suitable for your use case?</p>
<p class="alphau"><strong>A.</strong> AWS Step Functions</p>
<p class="alphau"><strong>B.</strong> AWS SageMaker</p>
<p class="alphau"><strong>C.</strong> AWS OpsWorks</p>
<p class="alphau"><strong>D.</strong> AWS Glue</p>
<p class="number"><strong><a href="ch16.xhtml#rch16qa8" id="ch16qa8">8.</a></strong> <span epub:type="pagebreak" id="page_434"/>Which of the following workflows are available in AWS Step Function? (Choose two.)</p>
<p class="alphau"><strong>A.</strong> Standard workflows</p>
<p class="alphau"><strong>B.</strong> Small workflows</p>
<p class="alphau"><strong>C.</strong> Large workflows</p>
<p class="alphau"><strong>D.</strong> Express workflows</p>
<p class="number"><strong><a href="ch16.xhtml#rch16qa9" id="ch16qa9">9.</a></strong> Which component provides a way of scoping Amazon SWF resources like workflow type and activity types within your AWS account?</p>
<p class="alphau"><strong>A.</strong> Domain</p>
<p class="alphau"><strong>B.</strong> Actors</p>
<p class="alphau"><strong>C.</strong> Tasks</p>
<p class="alphau"><strong>D.</strong> Polling</p>
<p class="number1"><strong><a href="ch16.xhtml#rch16qa10" id="ch16qa10">10.</a></strong> In AWS Step Functions, states can make decisions based on the input and perform certain actions, which are unique within the scope of the entire state machine. Which of the following are valid states that can be performed in your state machine? (Choose all that apply.)</p>
<p class="alphau"><strong>A.</strong> Succeed</p>
<p class="alphau"><strong>B.</strong> Task</p>
<p class="alphau"><strong>C.</strong> Wait</p>
<p class="alphau"><strong>D.</strong> Pass</p>
<h4 class="h4" id="ch16lev2sec18">Answers</h4>
<p class="numbert"><strong><a href="ch16.xhtml#ch16qa1" id="rch16qa1">1.</a> C.</strong> Amazon SWF allows you to develop asynchronous programs for initiating tasks to run remotely and track the program’s runtime state.</p>
<p class="number"><strong><a href="ch16.xhtml#ch16qa2" id="rch16qa2">2.</a> A, B, C, D.</strong> You can use the AWS Management Console, AWS SDK, Web Service APIs, and AWS Flow Framework.</p>
<p class="number"><strong><a href="ch16.xhtml#ch16qa3" id="rch16qa3">3.</a> A.</strong> Amazon API Gateway allows you to quickly create APIs by reducing development effort and time-to-market for your applications.</p>
<p class="number"><strong><a href="ch16.xhtml#ch16qa4" id="rch16qa4">4.</a> A, B, C.</strong> Amazon API Gateway supports REST API, HTTP API, and WebSocket API.</p>
<p class="number"><strong><a href="ch16.xhtml#ch16qa5" id="rch16qa5">5.</a> B, C, D.</strong> Deciders, activity workers, and workflow starters are programmatic actors in Amazon SWF.</p>
<p class="number"><strong><a href="ch16.xhtml#ch16qa6" id="rch16qa6">6.</a> D.</strong> The canary development strategy can be used to promote a new API to production without much impact to your end users.</p>
<p class="number"><strong><a href="ch16.xhtml#ch16qa7" id="rch16qa7">7.</a> A.</strong> AWS Step Functions can be used to manage and coordinate distributed applications by using visual workflows.</p>
<p class="number"><strong><a href="ch16.xhtml#ch16qa8" id="rch16qa8">8.</a></strong> <span epub:type="pagebreak" id="page_435"/><strong>A, D.</strong> Standard workflows and express workflows are available in AWS Step Functions.</p>
<p class="number"><strong><a href="ch16.xhtml#ch16qa9" id="rch16qa9">9.</a> A.</strong> A domain provides a way of scoping Amazon SWF resources like workflow type and activity types within your AWS account.</p>
<p class="number1"><strong><a href="ch16.xhtml#ch16qa10" id="rch16qa10">10.</a> A, B, C, D.</strong> Succeed, task, wait, and pass are the states available in AWS Step Functions.</p>
<h3 class="h3" id="ch16lev1sec5">Additional Resources</h3>
<p class="bulleta">• <strong>Amazon SWF</strong>   The recommended documentation for any AWS services, including Amazon Simple Workflow Service, is the official AWS documentation where you always get the latest and most up-to-date information.</p>
<p class="bulletc"><img alt="images" src="p0435-01.jpg"/></p>
<p class="bulleta">• <strong>Amazon API Gateway</strong>   The one-stop shop to find up-to-date details about all the new features of any AWS services, including Amazon API Gateway, is the official AWS documentation.</p>
<p class="bulletc"><img alt="images" src="p0435-02.jpg"/></p>
<p class="bulleta">• <strong>AWS Step Functions</strong>   There is no other place to get the latest information about any AWS services, including AWS Step Functions, other than the official AWS documentation.</p>
<p class="bulletc"><img alt="images" src="p0435-03.jpg"/><span epub:type="pagebreak" id="page_436"/></p>
</section>
</body>
</html>