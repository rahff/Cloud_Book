<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" lang="en" xml:lang="en">
<head>
<title>AWS Certified Developer Associate All-in-One Exam Guide (Exam DVA-C01)</title>
<link href="1260460177.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:c4d348f1-9c3d-457f-b76a-654174c9fde1" name="Adept.expected.resource"/>
</head>
<body>
<section epub:type="chapter">
<h2 class="h2c" id="ch13"><span epub:type="pagebreak" id="page_349"/><span class="chap">CHAPTER <span class="chap1">13</span></span></h2>
<h2 class="h2c1">AWS Relational Database Services</h2>
<p class="noindent">In this chapter, you will learn</p>
<p class="bulleta">• Amazon RDS</p>
<p class="bulleta">• Read replicas</p>
<p class="bulleta">• Option groups</p>
<p class="bulleta">• DB parameter groups</p>
<p class="bulleta">• Backups</p>
<p class="bulleta">• Snapshots</p>
<p class="bulleta">• Security</p>
<p class="bulleta">• Monitoring</p>
<p class="bulleta">• Best practices</p>
<p class="hr"/>
<p class="noindentb">This chapter will explain in detail the Amazon Relational Database Service (RDS) and its features.</p>
<h3 class="h3" id="ch13lev1sec1">Amazon Relational Database Service</h3>
<p class="noindent">The Amazon RDS offers different database options to choose from, like MySQL, MariaDB, PostgreSQL, Oracle, Microsoft SQL Server, and Amazon Aurora. RDS scales up the database based on CPU, memory, storage, and input\output operations per second (IOPS), and it manages software patching, backups, recovery, and automatic failure detection. The automated backups can be configured based on your need, or you can create manual backup snapshots. When you enable Multi-AZ, the primary DB instance offers high availability, and you can easily fail over to a synchronous secondary instance when required. The RDS database can be protected by creating it within a Virtual Private Cloud (VPC); in addition, you can control who can access your RDS databases by using AWS Identity and Access Management (IAM) that defines users and permissions.</p>
<p class="indent">Amazon RDS creates a DB instance as an isolated database environment, where you can contain multiple user-created databases. You can use the same tools and applications that you use with an on-premise database instance to access your DB instance. The RDS DB instances can be created or modified by using the AWS Command Line Interface <span epub:type="pagebreak" id="page_350"/>(CLI), Amazon RDS application programming interface (API), or the AWS Management Console. You can choose on-demand DB instances or reserved DB instances for your Amazon RDS database instance.</p>
<p class="indent">Based on the DB Engine, the RDS databases have specific features and a set of parameters in a DB parameter group, which controls the behavior of the databases. The DB instance class determines the computation and memory capacity of a DB instance. Although you select the DB instance depending on your needs, it can be changed over time when your need changes. Magnetic, General Purpose (SSD), and Provisioned IOPS (PIOPS) are the three types of DB instance storage types that differ in performance characteristics and price. The database engine and storage type determine the minimum and maximum storage requirements of the DB instance. It’s important to have enough storage to write the database content or logs in addition to have room to grow.</p>
<p class="indent">Amazon RDS can be used either within a VPC or outside it without any additional cost. Amazon RDS uses the Network Time Protocol (NTP) to synchronize the time, and it manages software patching, automatic failure detection, backups, and recovery. The DB instance can be run in multiple Availability Zones, which is called a Multi-AZ deployment. Amazon automatically creates and manages the secondary standby database instance in a different Availability Zone. In Multi-AZ, the primary DB instance is synchronously replicated to the secondary instance across another Availability Zone. This helps eliminate I/O freezes and provides data redundancy and failover support, in addition to minimizing the latency spikes during system backups.</p>
<p class="indent">There are many ways to connect with your Amazon RDS instance. You can use the web-based user interface to manage your DB instances from the AWS Management Console by navigating to <a href="https://console.aws.amazon.com/rds/">https://console.aws.amazon.com/rds/</a>. The AWS CLI can be used to access the Amazon RDS API interactively. You can access the Amazon RDS programmatically using AWS software development kits (SDKs) for application development that handles low-level details such as authentication, error handling, and retry logic. By default, you can create up to 40 Amazon RDS DB instances, including 10 for SQL Server (Enterprise, Standard, Web, and Express editions) and 40 for MySQL, Oracle, MariaDB, or PostgreSQL; if you need any additional DB instances, use the form at</p>
<p class="imagep"><img alt="images" src="p0350-01.jpg"/></p>
<p class="indent">The Amazon RDS API and AWS CLI use the DB instance identifier, which uniquely identifies the DB instance, and the RDS-supplied DNS hostname includes the identifier. You can create PostgreSQL, MySQL, Oracle, MariaDB, Microsoft SQL Server, and Amazon Aurora DB instances. The DB name should be unique within the DB instance. A master user account is created, which has permissions to create other databases and to perform Data Manipulation Language (DML) and Data Definition Language (DDL) operations on tables. When you create a DB instance, you need to configure the master user password, which can be changed any time using the AWS CLI, Amazon RDS API operations, or the AWS Management Console, in addition to using standard SQL commands. The compute and memory capacity of an Amazon RDS DB instance is determined by the DB instance class, and RDS supports the Burstable Performance instance <span epub:type="pagebreak" id="page_351"/>class, Memory Optimized instance class, and Standard instance class. The following are DB Instance Class hardware specifications:</p>
<p class="bullett">• <strong>vCPU</strong>   Specifies the number of virtual central processing units (CPUs) and is a unit of capacity that you can use to compare DB instance classes when renting capacity by the hour.</p>
<p class="bulleta">• <strong>ECU</strong>   Specifies the relative measure of the integer processing power expressed in terms of these EC2 compute units.</p>
<p class="bulleta">• <strong>Memory (GiB)</strong>   Specifies the RAM, in gibibytes, allocated to the DB instance and mostly is a consistent ratio between memory and vCPU.</p>
<p class="bulleta">• <strong>VPC Only</strong>   Specifies that the instance class is supported only for DB instances that are in a VPC based on the Amazon VPC service.</p>
<p class="bulleta">• <strong>EBS-Optimized</strong>   Uses an optimized Elastic Block Store (EBS) storage, which provides additional dedicated capacity for I/O for best performance for your instance.</p>
<p class="bulleta">• <strong>Max. Bandwidth (Mbps)</strong>   Specifies the maximum bandwidth in megabits per second.</p>
<p class="bulletb">• <strong>Network Performance</strong>   Specifies the network speed relative to other DB instance classes.</p>
<p class="indent">Amazon RDS instance performance metrics are on the summary page for your instance, and you can also use Amazon CloudWatch to monitor those metrics. The following are some of the useful metrics for your DB instance:</p>
<p class="bullett">• <strong>IOPS</strong>   The number of I/O operations per second; the total IOPS is calculated from the sum of the read and write IOPS.</p>
<p class="bulleta">• <strong>Latency</strong>   The elapsed time between I/O request submission and completion and is reported as the average latency for a given time interval in milliseconds (ms).</p>
<p class="bulleta">• <strong>Throughput</strong>   The number of bytes per second transferred; the average throughput ranges from zero to the maximum bandwidth.</p>
<p class="bulleta">• <strong>Queue Depth</strong>   The number of I/O requests waiting to be serviced but not sent to the device, since the device is servicing other I/O requests.</p>
<div class="siden">
<p class="imagen"><img alt="Images" class="inlinen" src="examtip.jpg"/></p>
<p class="note"><strong>EXAM TIP</strong>   You can use any standard SQL client application to access the Amazon RDS database because you are not allowed to directly access the database host.</p>
</div>
<h3 class="h3" id="ch13lev1sec2">High Availability (Multi-AZ)</h3>
<p class="noindent">Amazon RDS offers high availability and failover support using Multi-AZ deployments. When you create a Multi-AZ database, Amazon RDS creates a synchronous standby replica in another Availability Zone to eliminate I/O freezes and to provide data redundancy. A DB instance with high availability enabled can enhance availability by protecting your <span epub:type="pagebreak" id="page_352"/>databases against DB instance failure and Availability Zone disruption during planned system maintenance.</p>
<p class="indent">You can create a Multi-AZ deployment from the RDS console by choosing Multi-AZ when creating a DB instance. You can also convert existing DB instances to Multi-AZ deployments from the console by modifying the DB instance and choosing the Multi-AZ option. The Availability Zone of the standby replica can be viewed in the RDS console or from the AWS CLI by using the <span class="code">describe-db-instances</span> command or by using the Amazon RDS API DescribeDBInstances operation. Due to the nature of synchronous data replication, the Multi-AZ deployments may have write and commit latency compared to a Single-AZ deployment. AWS recommends using Provisioned IOPS for your production workloads to ensure consistent performance. When you convert your DB instance from a Single-AZ deployment to a Multi-AZ deployment, Amazon RDS takes a snapshot of the primary DB instance from your deployment, and then restores it into another Availability Zone.</p>
<div class="siden">
<p class="imagen"><img alt="Images" class="inlinen" src="examtip.jpg"/></p>
<p class="note"><strong>EXAM TIP</strong>   The Multi-AZ feature is not a scaling solution, so it cannot be used for read-only scenarios; instead, you should use a read replica for read-only traffic.</p>
</div>
<h4 class="h4" id="ch13lev2sec1">Multi-AZ Failover Process</h4>
<p class="noindent">An Amazon RDS Multi-AZ instance automatically switches to a standby replica in another Availability Zone in the event of either a planned or unplanned outage. The failover time depends on the database’s current activity, size, and other constraints when the primary DB becomes unavailable. It may take additional time for the RDS console user interface (UI) to reflect the new Availability Zone after the failover is complete. The failover automatically changes the DNS record of the DB instance to point to the standby DB instance. The database operations can be resumed quickly without DBA intervention, since failovers are handled automatically. The primary DB instance of Multi-AZ switches over automatically to its standby replica instance when any of the following events occur:</p>
<p class="bullett">• Whenever there is an outage of an Availability Zone</p>
<p class="bulleta">• The primary DB instance of your Multi-AZ DB instance fails</p>
<p class="bulleta">• The server type of the DB instance is changed</p>
<p class="bulleta">• During patching at the operating system level</p>
<p class="bulleta">• You have initiated a manual failover using reboot with failover</p>
<div class="siden">
<p class="imagen"><img alt="Images" class="inlinen" src="examtip.jpg"/></p>
<p class="note"><strong>EXAM TIP</strong>   You can force a Multi-AZ failover manually when you reboot a DB instance.</p>
</div>
<h3 class="h3" id="ch13lev1sec3"><span epub:type="pagebreak" id="page_353"/>The Amazon RDS Lifecycle</h3>
<p class="noindent">The Amazon RDS lifecycle includes create, modify, maintain, and upgrade; backups, restore; reboot; and delete.</p>
<h4 class="h4" id="ch13lev2sec2">Modify</h4>
<p class="noindent">Most DB instance changes can be applied immediately or delayed until an upcoming maintenance window. Rebooting is necessary before parameter group changes can take effect. The modify instructions can be applied by selecting the Apply Immediately option in the AWS Management Console, or use the <span class="code">--apply-immediately</span> parameter in AWS CLI, or use the ApplyImmediately parameter in Amazon RDS API. The changes are put into the pending modifications queue if you don’t choose to apply changes immediately.</p>
<div class="siden">
<p class="imagen"><img alt="Images" class="inlinen" src="caution.jpg"/></p>
<p class="note"><strong>CAUTION</strong>   Any pending modifications require downtime, so if you choose Apply Immediately, then it can cause unexpected downtime.</p>
</div>
<h4 class="h4" id="ch13lev2sec3">Maintain</h4>
<p class="noindent">Amazon RDS performs maintenance on Amazon RDS resources, including updates to the hardware, operating system, or DB engine version. Normally the operating system updates often occurs for security issues and should be implemented as soon as possible. The operating system or database patching might require taking your DB instance offline for a short time. The security and instance reliability patching is automatically scheduled during your maintenance window.</p>
<h5 class="h5">Maintenance Window</h5>
<p class="noindent">During the weekly maintenance window, all the system changes are applied, and some of the larger maintenance events may take more than 30 minutes to complete if you don’t explicitly specify a preferred maintenance window.</p>
<div class="siden">
<p class="imagen"><img alt="Images" class="inlinen" src="examtip.jpg"/></p>
<p class="note"><strong>EXAM TIP</strong>   Upgrade can be deferred to the next maintenance window and delay the DB instance update.</p>
</div>
<h4 class="h4" id="ch13lev2sec4">Upgrade</h4>
<p class="noindent">Amazon RDS releases the latest versions of database engines periodically based on the security enhancements, bug fixes, and other improvements. You can choose when and how to upgrade your database DB instances whenever Amazon RDS releases a new version of a database engine. Amazon RDS provides two categories of upgrades: major and minor. A major engine version upgrade introduces changes that may not be compatible with existing applications; in contrast, the minor version upgrade changes are backward-compatible with existing applications or can be a minor engine version update <span epub:type="pagebreak" id="page_354"/>to a DB engine version within a major engine version. You can enable auto minor version upgrades for the database if you want Amazon RDS to upgrade the DB engine version of a database automatically.</p>
<h4 class="h4" id="ch13lev2sec5">Rename</h4>
<p class="noindent">A DB instance can be renamed by using the AWS Management Console, using the <span class="code">modify-db-instance</span> command in AWS CLI, or using the ModifyDBInstance action in Amazon RDS API. Renaming a DB instance changes the endpoint for the DB instance, since the URL includes the DB instance name. The common reason for renaming a DB instance is to promote a read replica or DB snapshot restore or point-in-time recovery. You can replace the DB instance without changing any application code by renaming the database. You need to do the following:</p>
<p class="bullett">• Stop all traffic going to the master DB instance by redirecting or preventing traffic from accessing the databases on the DB instance.</p>
<p class="bulleta">• Rename the DB instance to a required new name.</p>
<p class="bulleta">• You can create a new DB instance by restoring from a DB snapshot or by promoting a read replica.</p>
<p class="bulleta">• You can now associate any read replicas.</p>
<p class="bulleta">• It is your responsibility to delete any unwanted DB snapshots of the old database instance.</p>
<h4 class="h4" id="ch13lev2sec6">Reboot</h4>
<p class="noindent">You normally reboot your DB instance for maintenance reasons, such as making certain modifications or changing the associated DB parameter group. You can perform the reboot with a failover if it is an Amazon RDS Multi-AZ instance. After a successful Amazon RDS reboot, an event is created. When you reboot, you can force a failover from one Availability Zone to another in a Multi-AZ deployment, and Amazon RDS automatically switches to a standby replica, and the DNS record is updated to point to the standby DB instance. After this, you need to re-establish and clean up any existing connections to your DB instance.</p>
<div class="siden">
<p class="imagen"><img alt="Images" class="inlinen" src="caution.jpg"/></p>
<p class="note"><strong>CAUTION</strong>   When forcing a failover from one Availability Zone to another, the change might not be reflected immediately in the AWS Management Console.</p>
</div>
<h4 class="h4" id="ch13lev2sec7">Stop</h4>
<p class="noindent">Your Amazon RDS DB instance can be stopped temporarily to save money; during that time, you are charged only for provisioned storage and backup storage but not for DB instance hours. The MariaDB, Microsoft SQL Server, MySQL, Oracle, and PostgreSQL DB instances can be stopped and started based on your need in all AWS regions, including Multi-AZ deployments. Because of the replica configuration, you can’t stop a SQL <span epub:type="pagebreak" id="page_355"/>Server DB instance in Multi-AZ. The DB instance performs a normal shutdown and stops running, and the DB instance status changes to stopping and then stopped. All the storage volumes remain attached to the DB instance, and their data is kept intact, but the data stored in the RAM is deleted. The stopped DB instance is started automatically if it is not started manually after seven days. The DB instance retains its ID, Domain Name Server (DNS) endpoint, parameter group, security group, and option group, including the transaction logs, so you can do a point-in-time restore if required. The DB instance with a read replica cannot be stopped, nor can the SQL Server DB instance in a Multi-AZ configuration. You cannot modify stopped DB instances, and you cannot delete a DB instance if an option group or DB parameter group is associated with it.</p>
<div class="siden">
<p class="imagen"><img alt="Images" class="inlinen" src="examtip.jpg"/></p>
<p class="note"><strong>EXAM TIP</strong>   Stopping and starting the DB instances might take more time in some cases compared to rebooting the DB instance.</p>
</div>
<h4 class="h4" id="ch13lev2sec8">Start</h4>
<p class="noindent">You can temporarily stop an Amazon RDS DB instance to save costs; restart it to begin using it. Your stopped DB instance retains the ID, DNS endpoint, parameter group, security group, and option group when restarted. You will be charged a full instance hour when you start a stopped instance. The DB instances can be started from the Amazon RDS console at <a href="https://console.aws.amazon.com/rds/">https://console.aws.amazon.com/rds/</a>. Then choose the DB instance that you want to start. You can call the start-db-instance command with the --db-instance-identifier to start a DB instance using the AWS CLI.</p>
<h4 class="h4" id="ch13lev2sec9">Delete</h4>
<p class="noindent">You can delete a DB instance that is no longer required by providing the instance name. You can choose to take the final DB snapshot of the instance that doesn’t have delete protection enabled. You will normally have the option to enable delete protection during the creation or modification of a DB instance so that others can’t delete it. When you use the AWS CLI and API commands, by default the delete protection is disabled, and it is enabled when you use the AWS Management Console. However, when deleting the DB instance, Amazon RDS enforces delete protection whether you use the console, the CLI, or the API. You first need to modify the instance and disable delete protection before deleting a DB instance that has deletion protection enabled. As with a read replica–enabled DB instance, you should either promote the read replica or delete it before you delete the DB instance.</p>
<h3 class="h3" id="ch13lev1sec4">Read Replicas</h3>
<p class="noindent">Amazon RDS uses a built-in replication functionality to create a read replica from a source DB instance by asynchronously copying the updates to it. The workload of your source DB instance can be reduced by routing read queries from your applications to the read replica. The read replica can elastically scale beyond the capacity constraints <span epub:type="pagebreak" id="page_356"/>of a single DB instance for read-heavy database workloads. You can use an existing DB instance as the source when creating a read replica, and when you take a snapshot, it creates a read-only instance based on it. The read replica is updated using asynchronous replication whenever there is a change to the source DB instance, and it allows only read-only connections. Your applications can connect to a read replica the same way they can connect to any DB instance. The read replica can reside in a different Availability Zone and even a different AWS region than its source DB instance. The read replica can be used for your business or data warehousing reporting, where you can run the queries against the read replica instead of your primary DB instance. The read replica can be used for disaster recovery, where you can promote your read replica to a stand-alone DB instance when your primary DB instance fails. Normally the read replica is created with the same storage type as its primary DB instance, but you can change it to a different storage type based on need.</p>
<h4 class="h4" id="ch13lev2sec10">Create a Read Replica</h4>
<p class="noindent">A read replica can be created from an existing DB instance from the AWS Management Console, AWS CLI, or AWS API. Amazon RDS creates a snapshot at the start when you create multiple read replicas in parallel, and the automatic backups should be enabled by configuring the backup retention period to more than 0.</p>
<h4 class="h4" id="ch13lev2sec11">Promote a Read Replica</h4>
<p class="noindent">You can promote a read replica into a stand-alone DB instance; during that time, your DB instance is rebooted before it becomes available for use. DDL operations, like creating or rebuilding indexes, can be performed on a read replica and then the read replica can be promoted to direct your application traffic to the promoted instance. Your read replica can be used for sharding, where a large database is split into many small databases. RDS provides synchronous replication, automatic failure detection, and failover so you can promote a read replica when the source DB instance fails.</p>
<h4 class="h4" id="ch13lev2sec12">Monitor Read Replication</h4>
<p class="noindent">Your read replica can be monitored in several ways: by using the Amazon RDS console, the AWS CLI, or the Amazon RDS API. The status of a read replica can be replicating, which means it is replicating successfully; error, which means an error has occurred; terminated, which means replication is terminated; and stopped, which means replication has stopped.</p>
<h3 class="h3" id="ch13lev1sec5">Option Groups</h3>
<p class="noindent">Amazon RDS option groups are used to provide security and management of your data and databases based on the features that are enabled for a DB instance. You can create, copy, or modify an option group before associating it with your DB instance. Option groups are associated with the DB instance and snapshots. When you restore a DB instance from a DB snapshot or point-in-time restore, the new DB instance will have <span epub:type="pagebreak" id="page_357"/>the option group that was originally associated with the snapshot. You can associate a different option group with the new restored DB instance as long as it contains any persistent or permanent options from the original option group. Options normally require additional memory, so you might need to launch a larger instance, depending on your current use of the DB instance.</p>
<p class="indent">You are not allowed to remove a persistent option group when it is associated with DB instances—for example, if your DB instance has the TDE option for Microsoft SQL Server transparent data encryption (TDE) associated, then this option group cannot be removed before disassociating all DB instances from it.</p>
<p class="indent">You cannot remove the permanent options, such as the TDE option for Oracle Advanced Security, from an option group. You are allowed to change the option group of an associated DB instance, but it must include the same permanent option.</p>
<h3 class="h3" id="ch13lev1sec6">DB Parameter Groups</h3>
<p class="noindent">DB parameter groups are used to apply different configurations to customize one or more DB instances by using built-in formulas, functions, and variables. The default DB parameter group is applied and cannot be modified, but you can create a new parameter group by choosing the relevant settings. The dynamic changes are applied immediately, regardless of the Apply Immediately setting, and the static parameter changes are applied after rebooting the DB instance.</p>
<div class="siden">
<p class="imagen"><img alt="Images" class="inlinen" src="examtip.jpg"/></p>
<p class="note"><strong>EXAM TIP</strong>   The default DB parameter group cannot be modified, since it contains the preferred parameter settings, so you need create a custom parameter group to update any parameter.</p>
</div>
<h3 class="h3" id="ch13lev1sec7">Storage</h3>
<p class="noindent">Some DB instance classes have a combination of memory and vCPUs for common workloads, and you can also manually optimize your DB instance for specific workloads or business needs. The processor settings for a DB instance are associated with snapshots of the DB instance; when you restore a snapshot, the feature settings used when the snapshot was taken are applied. Amazon RDS uses Amazon EBS volumes for database instances and log storage. Amazon RDS automatically stripes across multiple Amazon EBS volumes to enhance performance based on the amount of storage requested. Amazon RDS offers General Purpose SSD (gp2), Provisioned IOPS SSD (io1), and Magnetic, which differ in terms of performance characteristics and price.</p>
<p class="bullett">• <strong>General Purpose SSD</strong>   Offers cost-effective storage that is ideal for a broad range of workloads, and it can burst to 3,000 IOPS.</p>
<p class="bulleta">• <strong>Provisioned IOPS</strong>   Ideal for I/O-intensive workloads, specifically database workloads, which require consistent I/O throughput and low I/O latency.</p>
<p class="bulletb">• <strong>Magnetic</strong>   Ideal for backward compatibility; AWS recommends using General Purpose SSD or Provisioned IOPS for any new storage needs.</p>
<p class="indent"><span epub:type="pagebreak" id="page_358"/>When you create or modify your Amazon RDS DB instance, you have the option to choose the storage type and size by using the Amazon RDS Management Console or Amazon RDS API or AWS CLI. AWS recommends creating an Amazon CloudWatch alarm to monitor the DB instance free storage and increase it if necessary. If you have a DB instance that has an unpredictable workload, you have the option to enable the Amazon RDS storage autoscaling feature that scales up automatically based on need. You can set the maximum storage threshold, which can be equal to or less than the maximum allocated storage, by using the Amazon RDS console, AWS CLI, or Amazon RDS API.</p>
<div class="siden">
<p class="imagen"><img alt="Images" class="inlinen" src="examtip.jpg"/></p>
<p class="note"><strong>EXAM TIP</strong>   Only the IOPS provisioned to your DB instance can be scaled down; the General Purpose SSD and Magnetic storage cannot be reduced.</p>
</div>
<h3 class="h3" id="ch13lev1sec8">Billing</h3>
<p class="noindent">Amazon RDS On-Demand instances can be used to pay by the hour based on the usage, which is calculated on per-second basis with a minimum of 10 minutes. Amazon RDS reserved instances can be purchased at a significant discount for a one-year or three-year term, where the billing discount is applied to certain instance types and AWS regions. There are three types of reserved DB instances: No Upfront, where you get a discounted hourly rate and no up-front payment is required; Partial Upfront, where you pay part up-front and the remainder at a discounted hourly rate; and All Upfront, where full payment is made at the start with no other costs, regardless of the hours used. Amazon RDS is billed for data transfer to and from the Internet.</p>
<div class="siden">
<p class="imagen"><img alt="Images" class="inlinen" src="examtip.jpg"/></p>
<p class="note"><strong>EXAM TIP</strong>   You can save the cost of DB instance hours by stopping the Amazon RDS database instance; however, you are charged for provisioned storage, including manual snapshots and automated backups.</p>
</div>
<h3 class="h3" id="ch13lev1sec9">Backups</h3>
<p class="noindent">You can enable automated backups as a snapshot with a backup retention period, and your database can be recovered to any point in time based on this period. Automated backups will not occur when the DB instance is in a stopped state. A manual backup can be taken anytime or before you make any major update to the data or database. Both the automatic and manual DB snapshots can be copied, shared, and stored in the same region. You cannot recover your database without an automated or manual backup. You may need to temporarily disable backups when loading large amounts of data to your database. Before you delete your DB instance, Amazon RDS offers the option to take a final snapshot that can be used to recover the DB instance. You need to make sure that your backup window does not overlap with the weekly maintenance window, and the storage I/O might be suspended briefly while the backup process initializes for a few seconds. The default backup retention period is 1 day, but it can be set to up to 35 days. Remember that a backup retention period of 0 disables automated backups and your <span epub:type="pagebreak" id="page_359"/>automated backups do not have any limit; however, the manual snapshot has a limit of 100 per region. The stored backups can be restored or removed using the AWS Management Console, RDS API, and AWS CLI.</p>
<h3 class="h3" id="ch13lev1sec10">Snapshots</h3>
<p class="noindent">Amazon RDS takes a snapshot of your DB instance, and the backup time varies based on the size of your database, storage volume, and size of temporary files. The storage volume of the database is backed up as the DB snapshot, which you can restore using a new name and also using a different storage type than the original snapshot.</p>
<p class="indent">After copying the snapshot, it becomes manual, and you are allowed to copy across AWS regions. You can even copy snapshots across AWS accounts by creating a manual snapshot first and then manually copying it to the other account; however, you can copy only within the same AWS region if the snapshot is encrypted. Automated snapshots are deleted after the retention period is up, but you can take a manual snapshot if you want to keep them until you delete them. The DB instance can be restored to a specific point in time by using the DB snapshot, and it applies the default DB security group to the new DB instance. The DB snapshots can be deleted when you no longer need them by using the AWS Management Console, the AWS CLI, or the RDS API. Automated DB snapshots can be deleted by changing the backup retention period of your DB instance to 0 and re-enabled by changing the backup retention period to a number greater than 0.</p>
<div class="siden">
<p class="imagen"><img alt="Images" class="inlinen" src="examtip.jpg"/></p>
<p class="note"><strong>EXAM TIP</strong>   The shared encrypted DB snapshot cannot be restored directly; however, you can restore the DB instance from the copy of its snapshot.</p>
</div>
<h3 class="h3" id="ch13lev1sec11">Security</h3>
<p class="noindent">Security is the highest priority for every organization, especially if you are moving to the cloud. The AWS datacenters and network architecture are built securely to meet your compliance and security requirements. Cloud providers, including AWS, provide a shared security responsibility with their customers—that is, AWS takes the responsibility of protecting their infrastructure, and you as the customer should take the responsibility of securing your data based on sensitivity, compliance, and regulations. Amazon VPC provides total network access control to run your RDS DB instance. Amazon RDS resources can be managed using AWS IAM policies to assign permissions based on the least privilege role.</p>
<p class="indent">You can use DB security groups to set and control required IP addresses or ranges, like your company network range, to connect to your RDS databases or Amazon EC2 instances. DB security groups, EC2 security groups, and VPC security groups are supported in Amazon RDS. You can control access to a DB instance that is not in a VPC using a DB security group. You can control access to a DB instance that is inside a VPC using a VPC security group. You can control access to an EC2 instance using EC2 security group; these can also be used with a DB instance. The performance and health of a <span epub:type="pagebreak" id="page_360"/>DB instance can be tracked in many ways, such as an Amazon CloudWatch service or subscribing to Amazon RDS events to be notified about changes to your DB instance, parameter groups, security groups, or snapshots. Amazon RDS uses the AES-256 encryption algorithm, and both the Secure Sockets Layer (SSL) and Transport Layer Security (TLS) connections can be used. In addition, you can enable the standard security features of your RDS database engine using DB parameter groups.</p>
<h4 class="h4" id="ch13lev2sec13">Encryption</h4>
<p class="noindent">In Amazon RDS you can encrypt the underlying storage—all logs, backups, and snapshots, including its read replica—to provide an additional layer of data protection from any unauthorized access and meet your data-at-rest compliance requirements. You can enable TDE in your RDS database instance for Oracle or SQL Server DB instances, but keep in mind that this might affect the performance because of the additional encryption/decryption steps. You can use either AWS server-side encryption, where the key management is handled by AWS, or your own key using AWS Key Management Service (KMS), where you can enable CloudTrail to audit your key usage. When you copy your encrypted snapshot to other regions, you need to use a different KMS encryption key in the target region because KMS keys are bound to a region. The default AWS KMS encryption key cannot be used when you want to copy a snapshot to another region in the same AWS account. Your database client applications do not need to be changed when using Amazon RDS because encryption and decryption of your data happen transparently with negligible impact on DB instance performance.</p>
<h3 class="h3" id="ch13lev1sec12">Monitoring</h3>
<p class="noindent">You need to monitor your Amazon RDS database regularly using Amazon RDS events, enhanced monitoring; Amazon CloudWatch logs, metrics, alarms; and database logs to make sure it performs well and is available. Amazon CloudWatch receives the database metrics and dimensions every minute from Amazon RDS. The monitoring logs data can be used to debug any database issues like performance, network throughput, I/O for read and write, and connection issues of your DB instances. You might need to change the DB instance size or add more read replicas when your database is not performing up to the standard baseline defined already. You need to look for high CPU, RAM, IOPS, or disk space consumption based on your threshold value. Monitoring the network traffic and database connections is significant to keep your database performing at the expected level and investigate immediately if it is consistently lower than your baseline. The Amazon RDS console provides the number of DB connections, read and write operations, memory, CPU, and storage utilization in addition to the amount of network traffic to and from your DB instance. The AWS Trusted Advisor dashboard provides the number of idle DB instances, security group access risk, and Amazon RDS backups information. Amazon CloudWatch provides the current status, alarms, resources, and service health status. You can also create a CloudWatch dashboard to monitor the services, discover trends, and view AWS resource metrics.</p>
<h3 class="h3" id="ch13lev1sec13"><span epub:type="pagebreak" id="page_361"/>Amazon Resource Names</h3>
<p class="noindent">All the resources that you create in AWS will have a uniquely identifiable Amazon Resource Name (ARN). You may need to uniquely identify an Amazon RDS resource for some specific operations, such as creating a read replica, where you need to specify the source DB instance ARN. The ARN is constructed using the following format for your Amazon RDS resource:</p>
<p class="imagep"><img alt="images" src="p0361-01.jpg"/></p>
<h3 class="h3" id="ch13lev1sec14">Tagging</h3>
<p class="noindent">Amazon RDS tags contain a name-value pair that is used to add metadata to DB instances, to manage access to Amazon RDS resources, to control what actions can be applied, and to track costs by grouping similar resources. All Amazon RDS resources can be tagged, including DB instances, DB snapshots, DB clusters, DB cluster snapshots, DB cluster parameter groups, read replicas, reserved DB instances, DB option groups, event subscriptions, DB security groups, DB parameter groups, and DB subnet groups. You can copy tags from the DB instance to snapshots of the DB instance when you create or restore a DB instance—it is not copied by default. Tags can be copied when creating a DB instance, restoring a DB instance, creating a read replica, and copying a DB snapshot. Tags are used to organize the AWS bill to reflect the cost structure and to see the cost of combined resources and organize your billing information according to resources with the same tag key values. A tag set can contain as many as 50 tags, and when you add a tag that already exists, the new value overwrites the old value.</p>
<h3 class="h3" id="ch13lev1sec15">Best Practices</h3>
<p class="noindent">The following are basic operational best practices to follow when working with Amazon RDS:</p>
<p class="bullett">• Monitor your memory, CPU, and storage using Amazon CloudWatch and set up alerts to notify you when usage patterns change or are approaching the defined capacity.</p>
<p class="bulleta">• You can scale up your DB instance based on storage capacity and memory limits to accommodate unforeseen increases in demand from your applications.</p>
<p class="bulleta">• You need to enable automatic backups and set up an appropriate backup window based on the daily low in write IOPS.</p>
<p class="bulleta">• You can convert from standard storage to either provisioned IOPS or general-purpose storage based on your requirement and workload.</p>
<p class="bulleta">• You need to periodically test the failover for your DB instance to know how long the process takes for your use case and to make sure that your application can automatically connect to the failover DB instance.</p>
<p class="bulleta">• <span epub:type="pagebreak" id="page_362"/>AWS recommends allocating enough RAM so that your entire working set of data resides completely in memory, which can be verified using the ReadIOPS metric in Amazon CloudWatch.</p>
<p class="bulleta">• You can monitor the real-time metrics of the operating system (OS) where your DB instance runs from the console, or consume the Enhanced Monitoring JSON output from Amazon CloudWatch logs.</p>
<p class="bulleta">• You can set Amazon CloudWatch alarms for important metric thresholds like CPU utilization (i.e., percentage of computer processing capacity), free memory (i.e., RAM available), free storage space, read IOPS, write IOPS, read latency, write latency, read throughput, write throughput, queue depth, network receive throughput, network transmit throughput, swap usage, and DB connections used.</p>
<p class="bulleta">• Monitor high CPU, RAM consumption, throughput, or concurrency, which might be appropriate based on your goals for your application and are expected.</p>
<p class="bulleta">• The disk space consumption must be monitored closely to check whether the space used is consistently at or above 85 percent; then you may delete old data that is no longer required or you archive data to a cold storage service like Amazon Glacier.</p>
<p class="bulleta">• Monitor and take appropriate action when the network traffic throughput is consistently lower than expected.</p>
<p class="bulleta">• Continuously monitor database connections so you can see if high numbers of user connections appear in conjunction with decreases in instance performance and response time.</p>
<p class="bulleta">• Closely monitor IOPS metrics and compare them with the expected values, which depend on disk specification and server configuration, and make sure your typical working set will fit into memory to minimize read and write operations.</p>
<p class="bulleta">• Tune your most commonly used and most resource-intensive queries to make them less expensive to run and lower the pressure on system resources, which in turn will improve DB instance performance.</p>
<p class="bulleta">• If the DB issue persists after tuning your queries, consider upgrading your DB instance class to one with more of the resource (RAM, CPU, network bandwidth, disk space, and I/O capacity) based on the issue.</p>
<p class="bulleta">• AWS recommends properly testing the DB instance before applying any parameter group changes to your production DB instances because it can have unintended adverse effects, including degraded performance and system instability.</p>
<p class="bulleta">• Always exercise caution when modifying any DB engine parameters, and make sure to back up your DB instance before modifying and applying a DB parameter group change.</p>
<h3 class="h3" id="ch13lev1sec16"><span epub:type="pagebreak" id="page_363"/>Chapter Review</h3>
<p class="noindent">The chapter began by explaining Amazon RDS. It then introduced the Multi-AZ database, which offers availability and failover. The chapter then explained the read replica, which replicates from a source DB instance by asynchronously copying the updates, and how the workload can be reduced by copying read-only traffic to the read replica. We then saw how the Amazon RDS option groups are used to secure and manage your databases based on the features that are enabled for a DB instance. The DB parameter groups are used to customize your DB instances by using built-in functions and variables. There are DB instance classes that have a combination of memory and number of vCPUs for common workloads, and you can also specify these manually to optimize your DB instance for specific workloads or business needs. The processor settings for a DB instance are associated with snapshots of the DB instance; when you restore a snapshot, the feature settings are those used when the snapshot was taken. Amazon RDS On-Demand instances can be used to pay by the hour based on the usage, which is calculated on a per-second basis with a minimum of ten minutes. Amazon RDS reserved instances can be purchased at a significant discount for a one-year or three-year term, where the billing discount is applied to a certain instance type and AWS region. You can enable automated backups as a snapshot with a backup retention period, and your database can be recovered to any point in time based on this. The automated backups will not occur when the DB instance is in a stopped state. Amazon RDS takes a snapshot of your DB instance, and the backup time varies based on the size of your database, storage volume, and size of temporary files by using the AWS Management Console, AWS CLI, or the RDS API.</p>
<p class="indent">Security is the highest priority for every organization, especially if you are moving to the cloud. The AWS datacenters and its network architecture are built securely to meet your compliance and security requirements. You need to monitor your Amazon RDS database regularly using Amazon RDS events; enhanced monitoring; Amazon CloudWatch logs, metrics, alarms; and Database logs to make sure it performs well and is available. Amazon CloudWatch receives the database metrics and dimensions every minute from Amazon RDS. The monitoring log data can be used to debug any database issues like performance, network throughput, I/O for read and write, and connection issues.</p>
<h4 class="h4" id="ch13lev2sec14">Exercise</h4>
<p class="noindent">The following exercise will help you practice creating an Amazon RDS database. You need to create an AWS account, as explained earlier, in order to perform these exercises. You can use the Free Tier when launching AWS resources, but make sure to terminate them at the end.</p>
<h5 class="h5">Exercise 13-1: Create an Amazon RDS Using the AWS Management Console</h5>
<p class="noindent">The following step-by-step instructions help you create Amazon RDS PostgreSQL database using the AWS Management Console.</p>
<p class="numbert"><strong>1.</strong> Use your AWS account e-mail address and password to sign in to the AWS account and then navigate to the Amazon RDS console at <a href="https://console.aws.amazon.com/rds/">https://console.aws.amazon.com/rds/</a>.</p>
<p class="number"><strong>2.</strong> <span epub:type="pagebreak" id="page_364"/>Verify the AWS region by using the Region selector in the upper-right corner of the page.</p>
<p class="number"><strong>3.</strong> From the navigation pane, choose Databases.</p>
<p class="number"><strong>4.</strong> Click on the Create Database button.</p>
<p class="number"><strong>5.</strong> On the Create Database page, choose Standard Create.</p>
<p class="number"><strong>6.</strong> For the Engine Type choose PostgreSQL.</p>
<p class="number"><strong>7.</strong> For the Version choose 11.5-R1, although at the time of this writing you have the option to choose from version 9.3 to 11.5.</p>
<p class="number"><strong>8.</strong> For Templates choose Free Tier.</p>
<p class="number"><strong>9.</strong> In the DB Instance Identifier field type <strong>My-RDS-DB1</strong>.</p>
<p class="number1"><strong>10.</strong> For the Master Username type <strong>postgres</strong> and for the Master Password type <strong>MyP@ssw0rd</strong>.</p>
<p class="number1"><strong>11.</strong> For the DB instance size, select db.t2.micro.</p>
<p class="number1"><strong>12.</strong> Choose General Purpose (SSD) or Provisioned IOPS (SSD) for the Storage Type.</p>
<p class="number1"><strong>13.</strong> For Allocated Storage select 20 GiB.</p>
<p class="number1"><strong>14.</strong> Check Enable Storage Auto-Scaling, which increases your storage automatically when the threshold is reached.</p>
<p class="number1"><strong>15.</strong> Leave the default of 1000 GiB for the Maximum Storage Threshold selected.</p>
<p class="number1"><strong>16.</strong> Choose a Multi-AZ deployment or standby instance.</p>
<p class="number1"><strong>17.</strong> Select the VPC where you want to create your DB instance.</p>
<p class="number1"><strong>18.</strong> In the Additional Connectivity Configuration area, select the Subnet Group. For Publicly Accessible, select Yes but select No with regard to the enterprise environment.</p>
<p class="number1"><strong>19.</strong> Either choose an existing VPN security group or select the option to create a new one.</p>
<p class="number1"><strong>20.</strong> Now select the Availability Zone or leave No Preference selected to let AWS choose the Availability Zone for you.</p>
<p class="number1"><strong>21.</strong> Then select the database port. PostgreSQL’s default port is 5432, but you can change it to any custom TCP/IP port.</p>
<p class="number1"><strong>22.</strong> Choose the authentication method from the three available options: Password Authentication, Password and IAM Database Authentication, or Password and Kerberos Authentication.</p>
<p class="number1"><strong>23.</strong> In the Additional Configuration area, type <strong>mydatabase1</strong> for the initial database name.</p>
<p class="number1"><strong>24.</strong> For the DB Parameter Group choose default.postgress11 and for the Option Group choose default.postgress-11.</p>
<p class="number1"><strong>25.</strong> <span epub:type="pagebreak" id="page_365"/>Select Enable Automatic Backups and choose 3 days for the retention period.</p>
<p class="number1"><strong>26.</strong> You can select the backup window you desire, or leave no preference selected, where the time is in UTC.</p>
<p class="number1"><strong>27.</strong> Choose Copy Tags To Snapshots.</p>
<p class="number1"><strong>28.</strong> You can enable performance insights for advance database performance monitoring for a default of seven days or a long-term duration of two years.</p>
<p class="number1"><strong>29.</strong> Choose the default AWS key or provide your own key from KMS.</p>
<p class="number1"><strong>30.</strong> You can enable enhanced monitoring from 1 second to 60 seconds and use the RDS-monitoring-role or leave as the default, which will create a role for you.</p>
<p class="number1"><strong>31.</strong> Check both Postgresql Log and Upgrade Log to send the data to CloudWatch logs.</p>
<p class="number1"><strong>32.</strong> In the Maintenance section, check Enable Auto Minor Version Upgrade and select the maintenance window in UTC or leave No Preference selected to let AWS determine the window for you.</p>
<p class="number1"><strong>33.</strong> Finally check the Enable Deletion Protection option to prevent the accidental deletion of your database.</p>
<p class="number1"><strong>34.</strong> Before clicking on the Create Database button, you will see the estimated monthly costs for DB instance, Storage, Multi-AZ standby instance, and Provisioned IOPS.</p>
<p class="number1"><strong>35.</strong> Once you have reviewed everything, click on the Create Database button.</p>
<p class="number1"><strong>36.</strong> From the Amazon RDS screen, go to RDS | Databases | my-rds-db1 and click on Connectivity &amp; Security, where you will see the endpoint database hostname, post number, networking, and security details.</p>
<p class="number1"><strong>37.</strong> From the Amazon RDS screen, go to RDS | Databases | my-rds-db1 and click on Monitoring to see CPU utilization percentage, DB connections count, free storage space in MB, free memory in MB, write IOPS, and read IOPS.</p>
<p class="number1"><strong>38.</strong> From the Amazon RDS screen, go to RDS | Databases | my-rds-db1 and click on Logs &amp; Events, where you can see the list of CloudWatch alarms, create alarms, and see recent events and logs that can be viewed or downloaded.</p>
<p class="number1"><strong>39.</strong> From the Amazon RDS screen, go to RDS | Databases | my-rds-db1 and click on Configuration, where you can see instance configuration, instance class, storage information and performance insight details.</p>
<p class="number1"><strong>40.</strong> From the Amazon RDS screen, go to RDS | Databases | my-rds-db1 and click on Maintenance &amp; Backups, where you can view the maintenance details, pending maintenance details, backup, and DB Snapshots from where you can take additional snapshot or restore the DB instance from the snapshot.</p>
<p class="number1"><strong>41.</strong> From the Amazon RDS screen, go to RDS | Databases | my-rds-db1 and click on Tags to add, edit, and delete tags for your DB instance.</p>
<p class="number1"><strong>42.</strong> <span epub:type="pagebreak" id="page_366"/>From the Amazon RDS screen, go to RDS | Databases | my-rds-db1 and click on Modify on the top-right side to update any of the instance specifications, settings, network and security, database options, Kerberos authentication, backup, monitoring, log exports, performance insights, maintenance, and deletion protection options.</p>
<p class="number1"><strong>43.</strong> From the Amazon RDS screen, go to RDS | Databases | my-rds-db1 and click on Actions on the top right side to stop, reboot, delete, upgrade now, defer the upgrade, create a read replica, promote, take a snapshot, and restore to a point in time from your backup snapshots.</p>
<h4 class="h4" id="ch13lev2sec15">Questions</h4>
<p class="noindent">The following questions will help you gauge your understanding of the contents in this chapter. Read all the answers carefully because there might be more than one correct answer. Choose the best responses for each question.</p>
<p class="numbert"><strong><a href="ch13.xhtml#rch13qa1" id="ch13qa1">1.</a></strong> Your manager has asked you to provision a Redshift data warehousing database for reporting using Amazon RDS service. Which of the following database engines are supported in Amazon RDS?</p>
<p class="alphau"><strong>A.</strong> Amazon Aurora, MySQL, MariaDB, Oracle, SQL Server, and PostgreSQL database engines</p>
<p class="alphau"><strong>B.</strong> Amazon DynamoDB, MongoDB, SQL Server, and MySQL database engines</p>
<p class="alphau"><strong>C.</strong> Amazon Redshift, Cassandra, MariaDB, Oracle, and MySQL database engines</p>
<p class="alphau"><strong>D.</strong> MongoDB, MySQL, Oracle, SQL Server, and PostgreSQL database engines</p>
<p class="number"><strong><a href="ch13.xhtml#rch13qa2" id="ch13qa2">2.</a></strong> You are migrating on-premise applications and databases to the AWS Cloud and would like to choose a database service that provides automated administrative tasks, including daily backups, patching, and automated minor upgrades. Which of the following Amazon services offers that database automation?</p>
<p class="alphau"><strong>A.</strong> Amazon EC2</p>
<p class="alphau"><strong>B.</strong> Amazon RDS</p>
<p class="alphau"><strong>C.</strong> Amazon S3</p>
<p class="alphau"><strong>D.</strong> Amazon Route 53</p>
<p class="number"><strong><a href="ch13.xhtml#rch13qa3" id="ch13qa3">3.</a></strong> Your application team is running hundreds of reports in addition to performing lots of read, write, update, and delete operations on the Amazon RDS database instance. They are complaining about how slowly the database is running and report a running longer time occasionally. What you could do to help the application team run reports and perform I/O at the same time?</p>
<p class="alphau"><strong>A.</strong> Enable Multi-AZ</p>
<p class="alphau"><strong>B.</strong> Create two RDS DB instances</p>
<p class="alphau"><strong>C.</strong> Create a replica for running reports</p>
<p class="alphau"><strong>D.</strong> Increase the DB instance size</p>
<p class="number"><span epub:type="pagebreak" id="page_367"/><strong><a href="ch13.xhtml#rch13qa4" id="ch13qa4">4.</a></strong> You have successfully migrated your on-premises database to Amazon RDS. Your manager wants to understand the RDS billing and asked you how RDS is charged. Which of the following are correct charges? (Choose all that apply.)</p>
<p class="alphau"><strong>A.</strong> DB instance hours</p>
<p class="alphau"><strong>B.</strong> Storage (per GB per month) and backup storage</p>
<p class="alphau"><strong>C.</strong> I/O requests per month and data transfer</p>
<p class="alphau"><strong>D.</strong> Provisioned IOPS per month</p>
<p class="number"><strong><a href="ch13.xhtml#rch13qa5" id="ch13qa5">5.</a></strong> You are asked to help your company save costs by stopping the RDS database after working hours and on weekends. You configured an automated script to stop the RDS instances. What are the following charges incurred on the stopped RDS instances? (Choose three.)</p>
<p class="alphau"><strong>A.</strong> Storage (per GB per month)</p>
<p class="alphau"><strong>B.</strong> Backup storage</p>
<p class="alphau"><strong>C.</strong> Provisioned IOPS per month</p>
<p class="alphau"><strong>D.</strong> DB instance hours</p>
<p class="number"><strong><a href="ch13.xhtml#rch13qa6" id="ch13qa6">6.</a></strong> Your company has planned to implement Amazon RDS and use it for a long time, so you suggest reserved instances (RIs), which gives a significant discount compared to On-Demand instance pricing. What three RI payment options available? (Choose three.)</p>
<p class="alphau"><strong>A.</strong> On-Demand</p>
<p class="alphau"><strong>B.</strong> No Upfront</p>
<p class="alphau"><strong>C.</strong> Partial Upfront</p>
<p class="alphau"><strong>D.</strong> All Upfront</p>
<p class="number"><strong><a href="ch13.xhtml#rch13qa7" id="ch13qa7">7.</a></strong> Your company has bought reserved instances for us-east-1a availability in US-EAST region for three years. Now they realize the instances need to be provisioned in us-east-1d instead. Can you move the reserved instances between Availability Zones?</p>
<p class="alphau"><strong>A.</strong> Yes, you can move the reserved instances between Availability Zones.</p>
<p class="alphau"><strong>B.</strong> Yes, you can move the reserved instances between regions.</p>
<p class="alphau"><strong>C.</strong> No, you cannot move the reserved instances between Availability Zones.</p>
<p class="alphau"><strong>D.</strong> No, reserved instances cannot be moved at all.</p>
<p class="number"><strong><a href="ch13.xhtml#rch13qa8" id="ch13qa8">8.</a></strong> You have created a read replica with the DB instance class and the same region. Your manager wants to know whether the DB instance reservation can be applied to your read replica. Is it possible to apply reserved instances to your read replica?</p>
<p class="alphau"><strong>A.</strong> Yes, only if the read replica’s region is different.</p>
<p class="alphau"><strong>B.</strong> No, even if the DB instance class and region are the same.</p>
<p class="alphau"><strong>C.</strong> No, you cannot use reserved instances for a read replica.</p>
<p class="alphau"><strong>D.</strong> Yes, but only if the DB instance class and region are the same.</p>
<p class="number"><span epub:type="pagebreak" id="page_368"/><strong><a href="ch13.xhtml#rch13qa9" id="ch13qa9">9.</a></strong> A company created an Amazon RDS DB instance and enabled automatic backup with a retention period of 7 days. After a few weeks they realized that the retention period should be changed to 35 days. How can this be achieved?</p>
<p class="alphau"><strong>A.</strong> Modify your DB instance to change the retention period to 35 days.</p>
<p class="alphau"><strong>B.</strong> The retention period cannot be changed after the DB creation.</p>
<p class="alphau"><strong>C.</strong> The maximum retention period is 30 days.</p>
<p class="alphau"><strong>D.</strong> The DB instance needs to be terminated and created with correct retention period.</p>
<p class="number1"><strong><a href="ch13.xhtml#rch13qa10" id="ch13qa10">10.</a></strong> Your team created a DB instance in a single Availability Zone and the company decides to make the database highly available. What happens when you try to convert your RDS instance from a Single Availability Zone to a Multi-AZ database? (Choose three.)</p>
<p class="alphau"><strong>A.</strong> You need to stop your RDS DB instance before converting it.</p>
<p class="alphau"><strong>B.</strong> The primary instance snapshot should be taken.</p>
<p class="alphau"><strong>C.</strong> Using that snapshot, another standby instance is created in a different Availability Zone.</p>
<p class="alphau"><strong>D.</strong> The synchronous replication is set up between your primary instance and standby instance.</p>
<h4 class="h4" id="ch13lev2sec16">Answers</h4>
<p class="number"><strong><a href="ch13.xhtml#ch13qa1" id="rch13qa1">1.</a> A.</strong> Amazon offers the Amazon Aurora, MySQL, MariaDB, Oracle, SQL Server, and PostgreSQL database engines.</p>
<p class="number"><strong><a href="ch13.xhtml#ch13qa2" id="rch13qa2">2.</a> B.</strong> Amazon RDS automates common database administration tasks.</p>
<p class="number"><strong><a href="ch13.xhtml#ch13qa3" id="rch13qa3">3.</a> C.</strong> Create a replica for running reports and use the primary database for I/O operations.</p>
<p class="number"><strong><a href="ch13.xhtml#ch13qa4" id="rch13qa4">4.</a> A, B, C, D.</strong> DB instance hours, storage (per GB per month), backup storage, I/O requests per month, data transfer and provisioned IOPS per month.</p>
<p class="number"><strong><a href="ch13.xhtml#ch13qa5" id="rch13qa5">5.</a> A, B, C.</strong> Storage, backup storage, and provisioned IOPS.</p>
<p class="number"><strong><a href="ch13.xhtml#ch13qa6" id="rch13qa6">6.</a> B, C, D.</strong> No Upfront, Partial Upfront, and All Upfront.</p>
<p class="number"><strong><a href="ch13.xhtml#ch13qa7" id="rch13qa7">7.</a> A.</strong> Yes, you can move the reserved instances between Availability Zones.</p>
<p class="number"><strong><a href="ch13.xhtml#ch13qa8" id="rch13qa8">8.</a> D.</strong> Yes, but only if the DB instance class and region are the same.</p>
<p class="number"><strong><a href="ch13.xhtml#ch13qa9" id="rch13qa9">9.</a> A.</strong> You can modify your DB instance to change the retention period to 35 days.</p>
<p class="number1"><strong><a href="ch13.xhtml#ch13qa10" id="rch13qa10">10.</a> B, C, D.</strong> First the primary instance snapshot is taken and then a new standby instance is created in a different Availability Zone using the snapshot. Finally, synchronous replication is configured between your primary instance and standby instance.</p>
<h3 class="h3" id="ch13lev1sec17"><span epub:type="pagebreak" id="page_369"/>Additional Resources</h3>
<p class="bulleta">• <strong>AWS Documentation</strong>   There is no other place to get all the latest information than AWS documentation because it’s always up to date. Always refer to the official AWS blogs to get the latest updates about new AWS services and updates to existing features. The RDS User Guide can be accessed using the following link.</p>
<p class="bulletc"><img alt="images" src="p0369-01.jpg"/></p>
<p class="bulletn">The Amazon RDS CLI reference guide can be accessed using the following link.</p>
<p class="bulletc"><img alt="images" src="p0369-02.jpg"/></p>
<p class="bulletn">The Amazon RDS API reference guide can be accessed from the following link.</p>
<p class="bulletc"><img alt="images" src="p0369-03.jpg"/></p>
<p class="bulleta">• <strong>Guide to AWS re:Invent 2019 Amazon RDS Sessions</strong>   This is an important blog that has some very interesting Amazon RDS sessions and workshops.</p>
<p class="bulletc"><img alt="images" src="p0369-04.jpg"/></p>
<p class="bulleta">• <strong>AWS CloudFormation to Perform Point-in-Time Recovery of Amazon RDS</strong>   This blog explains the steps in detail to perform the point-in-time recovery of your Amazon RDS database using the AWS CloudFormation template.</p>
<p class="bulletc"><img alt="images" src="p0369-05.jpg"/></p>
<p class="bulleta">• <strong>Client-Side Encryption for a Multiregional Amazon RDS</strong>   This blog shows you the steps to perform client-side encryption using the customer master key and data encryption key stored in KMS.</p>
<p class="bulletc"><img alt="images" src="p0369-06.jpg"/></p>
<p class="bulleta">• <strong>Amazon RDS Multi-AZ</strong>   This is another very interesting blog that explains how the Amazon Multi-AZ works under the hood.</p>
<p class="bulletc"><img alt="images" src="p0369-07.jpg"/><span epub:type="pagebreak" id="page_370"/></p>
</section>
</body>
</html>