<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" lang="en" xml:lang="en">
<head>
<title>AWS Certified Developer Associate All-in-One Exam Guide (Exam DVA-C01)</title>
<link href="1260460177.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:c4d348f1-9c3d-457f-b76a-654174c9fde1" name="Adept.expected.resource"/>
</head>
<body>
<section epub:type="chapter">
<h2 class="h2c" id="ch6"><span epub:type="pagebreak" id="page_161"/><span class="chap">CHAPTER <span class="chap1">6</span></span></h2>
<h2 class="h2c1">Distributing the Contents via AWS CloudFront</h2>
<p class="noindent">In this chapter, you will learn</p>
<p class="bulleta">• Amazon CloudFront</p>
<p class="bulleta">• Origin servers</p>
<p class="bulleta">• Pricing</p>
<p class="bulleta">• Regional edge caches</p>
<p class="bulleta">• Securing content</p>
<p class="bulleta">• CloudFront distributions</p>
<p class="bulleta">• CNAME</p>
<p class="bulleta">• WebSocket support</p>
<p class="bulleta">• Optimizing content caching</p>
<p class="bulleta">• Content expiration</p>
<p class="bulleta">• Origin groups</p>
<p class="bulleta">• Lambda@Edge</p>
<p class="hr"/>
<p class="noindentb">In this chapter you will learn how Amazon CloudFront helps you distribute your content with low latency and high data transfer speeds in an easy and cost-effective way. You can access Amazon CloudFront using the AWS Management Console, AWS Software Development Kit (SDK), CloudFront application programming interface (API), AWS command-line interface, and AWS Tools for Windows PowerShell.</p>
<h3 class="h3" id="ch6lev1sec1">Amazon CloudFront</h3>
<p class="noindent">Amazon CloudFront is a content delivery service that speeds up distribution of your static and dynamic files to your end users using a global network of edge locations. It is offered to you as a self-service and is pay-per-use AWS offering, so you don’t need to pay any minimum fees up-front or commit to using it long term. For example, when a user requests high-definition (HD) video content from CloudFront, the user is routed to the nearest edge location that provides the lowest time delay (i.e., latency) and provides the best possible performance. <a href="ch06.xhtml#ch6fig1">Figure 6-1</a> explains how the content is stored and delivered to users.</p>
<p class="imagef" id="ch6fig1"><img alt="images" src="f0162-01.jpg"/></p>
<p class="figcaption"><strong>Figure 6-1</strong>   Configuring CloudFront</p>
<p class="indent"><span epub:type="pagebreak" id="page_162"/>Amazon CloudFront delivers the requested content immediately to your user with the lowest latency if the content is already in the edge location. CloudFront retrieves the user-requested content from an Amazon S3 bucket, HTTP server, or MediaPackage channel if it is not in the edge location already. CloudFront uses the AWS backbone network, which speeds up the distribution, to best serve each user request through the nearest edge location.</p>
<h3 class="h3" id="ch6lev1sec2">CloudFront Origin Servers</h3>
<p class="noindent">Origin servers can be an Amazon S3 bucket or your web HTTP server that stores the original files—the definitive version of your objects. CloudFront retrieves your files from the origin server and then distributes it to CloudFront edge locations all over the world. Your origin server will always be an Amazon S3 bucket when you are using the Adobe Media Server Real-Time Messaging Protocol (RTMP) protocol to serve media files on demand.</p>
<p class="indent"><span epub:type="pagebreak" id="page_163"/>You can upload your files, also known as objects, including media files, images, web pages, and anything that can be served over HTTP or Adobe RTMP, which is a protocol used by Adobe Flash Media Server. When using an Amazon S3 bucket as an origin server, if your bucket objects are publicly readable, they can be accessed using the CloudFront URL. However, you can keep the objects of your S3 bucket private and control access.</p>
<p class="indent">The CloudFront distribution instructs CloudFront which origin servers to contact to get the requested files. A domain name will be assigned to your new distribution, and you can add an alternative domain name if required. The distribution’s configuration will be sent to all points of presence (POPs), which is a collection of servers in geographically dispersed datacenters, and to all the edge locations, where it caches copies of your files.</p>
<p class="indent">You can either use the domain name that CloudFront provides for your URL or you can set up CloudFront to use your own domain name with your distribution for your application. You can also indicate how long you want the files to stay in the cache in CloudFront edge locations by configuring headers to the file in your origin server. Files stay in an edge location for 24 hours by default, and 0 seconds is the minimum expiration time.</p>
<p class="indent">Assume you have a popular application and a user accesses it from a different region requesting one of your famous video files. Your domain name service routes the request to the nearest CloudFront edge location, which serves the content with low latency. If the requested file is not cached in the edge location, CloudFront forwards the request to your origin server and sends it to the nearest edge location. CloudFront begins to forward the files to the user as quickly as the first byte returns from the origin, in addition to saving it to the cache in the edge location for future requests.</p>
<h3 class="h3" id="ch6lev1sec3">CloudFront Pricing</h3>
<p class="noindent">It is very important to understand the pricing model of Amazon CloudFront—or any service to build a cost-effective AWS application, for that matter—and avoid unnecessary charges or surprises in the future. CloudFront doesn’t require you to commit to how much content you’ll have, and you don’t have to pay any up-front fees. You only pay for what you use in a pay-as-you-go model.</p>
<p class="indent">You will be provided a billing report and summary report of CloudFront usage by AWS. The following are the typical charges that we will see for CloudFront:</p>
<p class="bullett">• <strong>Charges for storage</strong>   You pay normal Amazon S3 storage charges to store objects in your bucket.</p>
<p class="bulleta">• <strong>Charge for serving objects</strong>   You will incur charges when CloudFront responds to requests for your objects that include data transfer for WebSocket data from your server to client. The CloudFront charges appear in the CloudFront portion of your AWS statement as “region– DataTransfer-Out-Bytes.”</p>
<p class="bulletb">• <strong>Charge for submitting data</strong>   You incur charges when users transfer data to your origin, which includes DELETE, OPTIONS, PATCH, POST, and PUT requests and data transfers for WebSocket data from the client to your server. The CloudFront charges appear in the CloudFront portion of your AWS statement as “region – DataTransfer-Out-Bytes.”</p>
<div class="siden">
<p class="imagen"><span epub:type="pagebreak" id="page_164"/><img alt="Images" class="inlinen" src="note.jpg"/></p>
<p class="note"><strong>NOTE</strong>   You also incur a surcharge for HTTPS requests and an additional surcharge for requests that have field-level encryption enabled.</p>
</div>
<h3 class="h3" id="ch6lev1sec4">Regional Edge Caches</h3>
<p class="noindent">CloudFront regional edge caches save popular content so it can be served to users quickly. Regional edge caches are deployed globally and are located between your origin server and the global edge locations. When new objects become more popular than older objects, the older objects will be removed from the cache.</p>
<p class="indent">Regional edge caches have a larger cache, so objects remain longer in these locations. This improves overall performance for users and reduces the need for CloudFront to go to your origin server to get the content. Instead, CloudFront keeps persistent connections with origin servers. Dynamic content requests and the proxy methods PUT, POST, PATCH, OPTIONS, or DELETE go directly to the origin from the edge cache locations and will not go to the regional edge caches.</p>
<h4 class="h4" id="ch6lev2sec1">Adding Content</h4>
<p class="noindent">You need to add files to the origins that were defined in the distribution, and then CloudFront distributes the content and exposes it as a CloudFront link. A CloudFront edge location fetches the new files from an origin only when it receives a user request for that object. The file must be added to the Amazon S3 buckets specified in your distribution or a custom origin to a directory in the specified domain for CloudFront to distribute.</p>
<p class="indent">You need to create the correct path pattern for the cache behavior to send requests to the correct origin. For example, when you have a cache whose behavior is *.html, CloudFront will only forward *.html files, not any other file format like .jpg files that you uploaded to the origin, since the corresponding cache behavior doesn’t exist. AWS recommends setting the Content-Type header field when you upload a file to your origin.</p>
<h4 class="h4" id="ch6lev2sec2">Removing Content</h4>
<p class="noindent">When you no longer want your files to be included in your CloudFront distribution, you can delete them from your origin. However, the CloudFront still distributes files to users through the edge cache until the files expire. In order to remove the files right away, you must either invalidate the file or use file versioning, where different versions of a file have different names that can be used in the CloudFront distribution to return a different file to users.</p>
<h3 class="h3" id="ch6lev1sec5">Securing Content</h3>
<p class="noindent">You can configure HTTPS connections, use AWS Web Application Firewall (WAF), or set up field-level encryption to secure content in CloudFront distributions. You can use signed URLs or signed cookies to limit access to your private content by requiring access to CloudFront. For example, users from specific geographic locations can be prevented from accessing content distributed through CloudFront web distribution.</p>
<h4 class="h4" id="ch6lev2sec3"><span epub:type="pagebreak" id="page_165"/>HTTPS with CloudFront</h4>
<p class="noindent">You can configure CloudFront to use HTTPS encrypted connections to request and deliver objects to your users.</p>
<h4 class="h4" id="ch6lev2sec4">Restrict Access in the Origin</h4>
<p class="noindent">You can restrict access to your files in the origin by either setting up an origin access identity (OAI) for your Amazon S3 bucket or configuring custom headers for a private HTTP server or configuring a S3 bucket as a website endpoint.</p>
<h4 class="h4" id="ch6lev2sec5">Restrict Access in Edge Caches</h4>
<p class="noindent">You can restrict access to your content in edge caches by configuring CloudFront to require users to use either signed URLs or signed cookies. Your application needs to distribute signed URLs or send Set-Cookie headers, which sets signed cookies for authenticated users. When users access the cached content, CloudFront compares the cookies and then serves the content only if it matches.</p>
<h4 class="h4" id="ch6lev2sec6">Signed URLs and Signed Cookies</h4>
<p class="noindent">If you want to distribute your content over the Internet but want to restrict access to business documents, sensitive data, media streams, or content that is intended for selected users like paid registered users, you can do so by using CloudFront signed URLs or signed cookies, not by accessing the origin server, which is either S3 bucket or HTTP server URLs.</p>
<h5 class="h5">Signed URLs</h5>
<p class="noindent">A signed URL contains a policy statement in JSON format that specifies the restrictions such as expiration date and time that gives you more control over who has access to your content. As mentioned, this is based on either a canned policy or a custom policy. Your CloudFront distribution contains one or more trusted signers who have permission to create signed URLs. The application creates signed URLs for the files or parts of the application that you want to restrict access to. When your user requests a file that requires signed URLs, your application verifies whether the user is entitled to this access—for example, they meet some access requirement or they’ve paid a fee or they’ve signed in. Your application then creates and returns a signed URL to the user, which immediately can be used to access the file from the CloudFront edge cache without any intervention from the user. Using the public key, CloudFront validates the signature and confirms that the URL hasn’t been tampered with—the request is rejected if the signature is invalid. If the signature is valid, CloudFront looks at the policy statement to confirm that the request is still valid and that the user is accessing the content during the time period that you specified.</p>
<div class="siden">
<p class="imagen"><img alt="Images" class="inlinen" src="note.jpg"/></p>
<p class="note"><strong>NOTE</strong>   The same CloudFront distribution can have some signed URLs using canned policies and it can have some signed URLs using custom policies.</p>
</div>
<h5 class="h5"><span epub:type="pagebreak" id="page_166"/>Lifetime of Signed URLs</h5>
<p class="noindent">A signed URL is valid for only a short time—possibly for as little as a few minutes—and they are good for distributing content on-the-fly to a user, like music downloads or distributing movie rentals. CloudFront compares the expiration time in the URL with the current time when the user starts to download a file or starts to play a media file to determine whether the URL is still valid.</p>
<h5 class="h5">Signed Cookies</h5>
<p class="noindent">CloudFront signed cookies allow you to control who can access your content using a policy statement in JSON format that specifies the restrictions when you don’t want to change your current URLs or when you want to provide access to multiple restricted files. You can use canned policies or custom policies for this. You can define one or more trusted signers in your CloudFront distribution who have permission to create signed URLs and signed cookies.</p>
<p class="indent">Your application determines whether a user should have access to your content and sends three Set-Cookie headers to the user; a CloudFront signed cookie requires three Set-Cookies, each of which contains a name-value pair. The Set-Cookie headers must be sent to the users before your user can request your private content, and based on that it will have a minimum of two cache behaviors: one requiring authentication and another one without. When a registered user signs in to your website, your application returns the Set-Cookie headers in the response and the user stores the name-value pairs.</p>
<p class="indent">The user requests a file, and CloudFront uses the public key to validate the signature in the signed cookie to confirm that the cookie hasn’t been tampered with. If the signature in the cookie is valid, CloudFront looks at the policy statement in the cookie to confirm that the request is still valid and confirms whether the user is accessing your content during the allowed time period. If the request satisfies the policy statement, then CloudFront determines whether the file is in the edge cache already; if not, the request is forwarded to the origin, which finally returns the content to the user.</p>
<h5 class="h5">Signed Cookie Lifetime</h5>
<p class="noindent">CloudFront checks the expiration date and time in the cookie at the time of the HTTP request to determine whether a signed cookie is still valid. If your user begins downloading a large file just before the expiration time, then the download completes successfully even if the expiration time has passed. However, if the TCP connection drops and the client tries to restart the download after the expiration time passes, the download will fail.</p>
<h5 class="h5">Choosing Between Signed URLs and Signed Cookies</h5>
<p class="noindent">Both signed URLs and signed cookies allow you to control who can access your content. You need to decide whether to use signed URLs or signed cookies when you want to serve private content using CloudFront.</p>
<p class="indent">Signed URLs are necessary when you want to use an RTMP distribution because signed cookies aren’t supported. It is useful when you want to restrict access to individual files instead of your entire content. It can also be used for a client that doesn’t support cookies. <span epub:type="pagebreak" id="page_167"/>The signed cookies can be used when you want to provide access to multiple restricted files. It is also useful when your application doesn’t want to change the current URL.</p>
<h5 class="h5">Using Both Signed URLs and Signed Cookies</h5>
<p class="noindent">When your application uses both signed URLs and signed cookies to control access to the same set of files, then CloudFront determines whether to return the file to the requested user or not only based on the signed URL and ignores the signed cookie. When your application is not using a signed URL but the URL contains query string parameters like Expires, Policy, Signature, and Key-Pair-Id, then it is not possible to use either signed URLs or signed cookies because CloudFront thinks signed URLs are being used and will disregard signed cookies as well.</p>
<h4 class="h4" id="ch6lev2sec7">Origin Access Identity</h4>
<p class="noindent">You can prevent your users from directly accessing files using Amazon S3 URLs and bypassing CloudFront. OAI is a special CloudFront user that needs to be granted the identity permission to read the files in your bucket and remove any other permission to use the Amazon S3 URL.</p>
<p class="indent">You can create CloudFront signed URLs or signed cookies to limit access to files in your Amazon S3 bucket and create the OAI and associate it with your distribution. CloudFront uses OAI to access and serve files to your users and restrict direct URL access to the S3 bucket to access any file there.</p>
<h4 class="h4" id="ch6lev2sec8">AWS WAF to Control Access</h4>
<p class="noindent">You can configure WAF to monitor CloudFront’s HTTP and HTTPS requests and control access to your content. Based on the request’s IP address or query strings value, CloudFront responds either with the requested content or with an HTTP 403 status code for a forbidden request; you also can configure a custom error page when a request is blocked.</p>
<h4 class="h4" id="ch6lev2sec9">Restricting Geographic Distribution</h4>
<p class="noindent">Geoblocking is a feature that prevents users in specific geographic locations from accessing your content using the CloudFront distribution. The CloudFront geo restriction feature can be used to restrict access at the country level to all of the files in a distribution. If you need to restrict access at a finer granularity than the country level and restrict access to a subset of the files in a distribution, use a third-party geolocation service.</p>
<h5 class="h5">CloudFront Geo Restriction</h5>
<p class="noindent">CloudFront typically serves the requested content, regardless of where the user is located. However, you can use the CloudFront geo restriction feature to allow users to access your content only if they are from your approved whitelisted countries. You can prevent your users from accessing your content if they’re in one of the countries on a blacklist of banned countries. For example, if you are not authorized to distribute your content to a country for copyright reasons, use CloudFront geo restriction to block the request.</p>
<h5 class="h5"><span epub:type="pagebreak" id="page_168"/>Third-Party Geolocation</h5>
<p class="noindent">When you have geographic restrictions that are more granular than country boundaries or when you need to limit access to only few of the files, you need to combine CloudFront with a third-party geolocation service. You can control access to your content based on city, ZIP or postal code, or even latitude and longitude in addition to country. AWS recommends using CloudFront–signed URLs with an expiration date and time and the S3 bucket as your origin when you’re using a third-party geolocation service because OAI can prevent users from accessing your content directly from the origin.</p>
<h4 class="h4" id="ch6lev2sec10">Field-Level Encryption</h4>
<p class="noindent">Field-level encryption adds another layer of security along with HTTPS, which enforces secure end-to-end connections to origin servers and lets you protect specific data by making sure only certain applications can see it. You can securely upload sensitive information like the credit card number of your payment processing system to your web servers securely using field-level encryption. The uploaded information is kept encrypted at the edge location closer to your user and remains encrypted throughout the entire application stack by making sure only applications that need the data that have the credentials to decrypt it can access it.</p>
<p class="indent">Field-level encryption can encrypt up to ten data fields in a request, and you can specify the set of fields in POST requests that needs be encrypted, along with the public key to encrypt them. When sensitive data forwarded to the origin by an HTTPS request that has field-level encryption is enabled, sensitive data will still be encrypted, thereby reducing the risk of accidental loss of the sensitive data or a data breach. Only the applications with the appropriate private key can decrypt and access the data. All sensitive data is encrypted by CloudFront automatically using your public key. Since the CloudFront field-level encryption uses asymmetric encryption, which is also called public-key encryption, it cannot be used to decrypt the encrypted values—your application needs to use your private key to decrypt it.</p>
<h3 class="h3" id="ch6lev1sec6">CloudFront Distributions</h3>
<p class="noindent">A CloudFront distribution defines where the contents are delivered from and when you want to distribute your content, as well as the details about how to track and manage content delivery. The content origin can be an Amazon S3 bucket, MediaPackage channel, or HTTP server, and a combination of up to 25 origins can be configured. You can allow the files to be available to everyone or restrict access to just some users. You can add more security by configuring CloudFront to require users to use HTTPS to access your content. CloudFront can be configured to forward cookies or query strings to your origin. You can prevent users in selected countries from accessing your content using geo restriction. You can also configure CloudFront to create access logs that show user activity.</p>
<h4 class="h4" id="ch6lev2sec11">Distribution Contents</h4>
<p class="noindent">You can configure and serve the content worldwide, as shown in <a href="ch06.xhtml#ch6fig2">Figure 6-2</a>. You can serve contents over HTTP or HTTPS using distributions. Static and dynamic content can be <span epub:type="pagebreak" id="page_169"/>downloaded in .html, .css, .js, and image file formats. You can serve video on demand in Apple HTTP Live Streaming (HLS) and Microsoft Smooth Streaming formats. You can serve Adobe Flash multimedia content using a CloudFront RTMP distribution. You can also serve live streaming, like a meeting, conference, or concert, by creating the distribution automatically using an AWS CloudFormation stack.</p>
<p class="imagef" id="ch6fig2"><img alt="images" src="f0169-01.jpg"/></p>
<p class="figcaption"><strong>Figure 6-2</strong>   CloudFront content delivery</p>
<h4 class="h4" id="ch6lev2sec12">Origins for Web Distributions</h4>
<p class="noindent">When creating a distribution, you can specify where CloudFront should send requests for your content. CloudFront supports using several AWS resources as origins. For example, you can specify an Amazon S3 bucket or a MediaStore container, a MediaPackage channel, or a custom origin, such as an Amazon EC2 instance or your own HTTP web server.</p>
<h5 class="h5">Amazon S3 Buckets</h5>
<p class="noindent">Amazon S3 can be used as an origin for your distribution, and you place any objects that you want CloudFront to deliver in it. You can use the S3 console, API, or a third-party tool to get your objects into Amazon S3. You can create a hierarchy in your bucket to store the objects and access Amazon S3 objects at the standard Amazon S3 price. AWS recommends the following format when you specify the Amazon S3 bucket using CloudFront to get objects:</p>
<p class="imagep"><img alt="images" src="p0169-01.jpg"/></p>
<p class="indent">Using this format allows you to configure CloudFront to communicate with your S3 bucket using SSL. It also allows you to use an OAI and update the contents of your <span epub:type="pagebreak" id="page_170"/>bucket using POST and PUT requests. AWS recommends using the following format when you configure your CloudFront distribution using the S3 static website as the origin:</p>
<p class="imagep"><img alt="images" src="p0170-01.jpg"/></p>
<p class="indent">Using this format allows you to use S3 redirects and S3 custom error documents. You will not be charged extra for using your S3 bucket as the CloudFront origin server, but you will still incur regular Amazon S3 charges.</p>
<div class="siden">
<p class="imagen"><img alt="Images" class="inlinen" src="caution.jpg"/></p>
<p class="note"><strong>CAUTION</strong>   For your bucket to work with CloudFront, the name must conform to DNS naming requirements.</p>
</div>
<h5 class="h5">MediaStore or MediaPackage</h5>
<p class="noindent">In order to use MediaStore or MediaPackage as the origin, you need to configure the S3 bucket as a MediaStore container or create endpoints or a channel with MediaPackage and then configure a distribution in CloudFront to stream videos.</p>
<h5 class="h5">Amazon EC2 Custom Origins</h5>
<p class="noindent">A custom origin is an HTTP server, and it can be an EC2 instance or your private HTTP server that you manage on-premises. A static website endpoint configured on S3 is also considered a custom origin. You need to specify the DNS name and HTTP and HTTPS ports, along with the protocol when using your own HTTP server as a custom origin. RTMP distribution is not supported as a custom origin content. Your private server content from a custom origin must remain publicly accessible for CloudFront to access it.</p>
<p class="indent">When using EC2 as your custom origin, AWS recommends using an AMI that automatically installs the software for a web server. Also put your EC2 instances behind an Elastic Load Balancing load balancer to handle traffic and specify the URL of the load balancer for the domain name of your origin server when creating your CloudFront distribution.</p>
<h3 class="h3" id="ch6lev1sec7">Alternate Domain Names</h3>
<p class="noindent">An alternate domain name, which is also called a CNAME, allows you to use your own domain name, like <a href="http://www.sample.com">www.sample.com</a>, instead of using the random domain name that CloudFront assigns to your distribution for your file links. CNAME is supported for both web and RTMP distributions. CloudFront returns a random domain name for the distribution, as shown, when you create a new distribution:</p>
<p class="imagep"><img alt="images" src="p0170-02.jpg"/></p>
<p class="indent">For your video file my-video.mpeg /videos/my-video.mpeg, the URL of the CloudFront domain name will look like this:</p>
<p class="imagep"><img alt="images" src="p0170-03.jpg"/></p>
<p class="indent"><span epub:type="pagebreak" id="page_171"/>If you want to use your own or your company domain name instead of the cloudfront.net domain name, add an alternate domain name like <a href="http://www.sample.com">www.sample.com</a> to your distribution, and then the URL of your video file /videos/videos.mpeg will look like this:</p>
<p class="imagep"><img alt="images" src="p0171-01.jpg"/></p>
<h3 class="h3" id="ch6lev1sec8">WebSocket Protocol</h3>
<p class="noindent">WebSocket, a TCP-based protocol, is used for long-lived bidirectional connections between clients and servers, and it is supported by CloudFront. It is used for real-time applications like online collaboration workspaces, social chat platforms, multiplayer gaming (which requires persistent connections), and financial trading platforms with real-time data feeds. When data is sent over a WebSocket connection, it can flow in both directions for full-duplex communication and with no additional configuration; CloudFront supports WebSocket connections on all regions worldwide. If both your client and server can support the WebSocket protocol, then CloudFront distributions can handle the long-lived real-time connections because it has built-in WebSocket protocol support. The WebSocket protocol uses port 80 for ordinary WebSocket connections and port 443 for TLS/SSL WebSocket connections, and the connection remains open for either the client or server to send data frames to each other without establishing new connections each time.</p>
<h3 class="h3" id="ch6lev1sec9">Optimizing Content Caching</h3>
<p class="noindent">You need to configure and manage caching of your contents wisely to improve performance and to meet your business obligations. One of the primary uses of CloudFront is to reduce the number of trips to your origin server to reduce the load on your origin server, which in turn reduces the latency because your contents are served from a CloudFront edge that is closer to your user. The majority of user requests are served from edge caches by CloudFront, and only a very few requests are forwarded to your origin to get the latest version of the content.</p>
<h4 class="h4" id="ch6lev2sec13">Cache Hit Ratio</h4>
<p class="noindent">Cache hit ratio refers whether content is served from CloudFront edge caches (cache hit) or your origin servers (cache miss). The CloudFront console can be used to view the percentage of user requests that are hits, misses, or errors. A number of factors affect the cache hit ratio, and you can improve performance by increasing the proportion of your user requests that are served from CloudFront edge caches.</p>
<h4 class="h4" id="ch6lev2sec14">Cache Lifetime</h4>
<p class="noindent">Your origin can be configured to add a Cache-Control max-age to your objects and specify the longest value for max-age to increase the cache hit ratio. If you configure a shorter cache duration, CloudFront forwards requests to your origin more frequently to find out whether the content has changed and to get the latest version.</p>
<h4 class="h4" id="ch6lev2sec15"><span epub:type="pagebreak" id="page_172"/>Query String Parameters</h4>
<p class="noindent">CloudFront can be configured to cache based on query string parameters to improve caching. CloudFront forwards only the query string parameters for which your origin will return unique objects. It is case sensitive, so you need to pay attention to this so that separate requests are not forwarded to your origin. For example, if you use String1=Y and String2=y, then CloudFront sends two separate requests to the origin. Also you need to use the list parameters in the same order. As with differences in case, if one list request is list1=x&amp;list2=y and another list request is list2=y&amp;list1=x, CloudFront treats both of these requests separately and sends two requests to your origin and then separately caches them for future corresponding object requests even if they’re identical.</p>
<h4 class="h4" id="ch6lev2sec16">Caching Based on Cookie Values</h4>
<p class="noindent">CloudFront can be configured to cache based on cookie values, and it can be improved by forwarding only to specific cookies instead of forwarding to all cookies. CloudFront forwards every combination of cookie name and value to your origin and separately caches the objects from your origin, even if they all are equal. For example, assume that a user included three cookies in every request and each cookie has four possible values. CloudFront forwards up to 12 different requests to your origin for each object. You can configure separate cache behaviors for static and dynamic content and set up CloudFront to forward cookies only for dynamic content to your origin.</p>
<h4 class="h4" id="ch6lev2sec17">Caching Based on Request Headers</h4>
<p class="noindent">CloudFront can be configured to forward and cache based only specified headers to improve caching instead of forwarding and caching based on all headers. CloudFront forwards every combination of header name and value by separately caching the objects from your origin even if they all are same. For example, when you want to serve different sizes of an image based on the user’s device, you need to configure CloudFront to cache based on the CloudFront device-type headers CloudFront-Is-Desktop-User, CloudFront-Is-Tablet-User, CloudFront-Is-SmartTV-User, and CloudFront-Is-Mobile-User. When returning the identical version of the image for desktops and tablets, forward only the CloudFront-Is-Tablet-User header, not the CloudFront-Is-Desktop-User header.</p>
<h3 class="h3" id="ch6lev1sec10">Content Expiration at the Edge Cache</h3>
<p class="noindent">How long your files can stay in a CloudFront cache can be controlled before forwarding another request to your origin. Reducing and increasing the duration serve different purposes. When you reduce the duration, it allows you to serve dynamic content, and when you increase the duration your users get better performance because your files are most probably served directly from the edge cache. Your origin load can be reduced by setting a larger duration because CloudFront serves files from an edge location until the cache duration expires. Only after the expiration will CloudFront forward the request to the origin server to verify whether the cache contains the latest version of the file.</p>
<h3 class="h3" id="ch6lev1sec11"><span epub:type="pagebreak" id="page_173"/>CloudFront Origin Groups</h3>
<p class="noindent">You can create an origin group by designating one as a primary origin and another as a secondary origin for CloudFront. The primary and secondary origin group can be any combination of different AWS origins, S3 buckets, Amazon EC2 instances, or HTTP web servers. You can define the cache behavior by defining the origin group as the primary origin, which can be used for origin failover scenarios and also provides high availability by automatically switching to the secondary origin when the primary origin returns HTTP 2xx or HTTP 3xx status code responses. When the primary origin returns a particular HTTP status code that was configured for failover or after a timeout occurs, CloudFront routes all the requests to the secondary backup origin in the origin group.</p>
<div class="siden">
<p class="imagen"><img alt="Images" class="inlinen" src="note.jpg"/></p>
<p class="note"><strong>NOTE</strong>   CloudFront issues a connection timeout error when it cannot connect to the origin after three consecutive attempts for a single request, and it waits up to ten seconds between connection attempts.</p>
</div>
<h3 class="h3" id="ch6lev1sec12">Domain Fronting</h3>
<p class="noindent">Domain fronting occurs when a client makes a TLS/SSL connection to a specific name but makes a HTTPS request for a different name, which occurs across different AWS accounts. For example, the TLS connection might connect to “<a href="http://www.sample.com">www.sample.com</a>” but then issue a request for “<a href="http://www.sample.edu">www.sample.edu</a>.” CloudFront includes protection against domain fronting by serving specific connections to the same AWS account that owns the request. If the two AWS account numbers do not match, then CloudFront responds with a 421 Misdirected Request response, which gives the client an option to connect using the correct domain.</p>
<h3 class="h3" id="ch6lev1sec13">Custom Error Pages</h3>
<p class="noindent">Custom error pages can be used with origin groups, and CloudFront can be configured to return a custom error page for the primary or secondary origin or both. Also you can return a custom error page for both primary and secondary origins. CloudFront returns the custom error page to users when the primary origin returns an HTTP status code error that you have not configured for failover or when the CloudFront fails over to the second origin.</p>
<h4 class="h4" id="ch6lev2sec18">Request and Response Behavior</h4>
<p class="noindent">CloudFront processes user requests and forwards them to your origin and then processes the responses from your origin and caches 4xx and 5xx HTTP status codes. CloudFront returns an HTTP 3xx status code when it requests an object from your origin server indicating that either the URL has changed, it was permanently moved (301 error), was redirected temporarily, the object hasn’t changed since the last time it was requested (307 error), or was not modified (304 error). CloudFront caches 3xx responses for the duration specified by the settings in your CloudFront distribution and by the header fields that your origin returns along with an object.</p>
<p class="indent"><span epub:type="pagebreak" id="page_174"/>When you request an object that is not in the edge cache, your origin returns an HTTP 5xx status code instead of returning a 304 (not modified) status code or an updated version of the object. Your origin returns an HTTP 4xx status code that is not restricted by a cache control header and is included in HTTP 4xx and 5xx status codes that CloudFront always caches.</p>
<h3 class="h3" id="ch6lev1sec14">Lambda@Edge</h3>
<p class="noindent">You can customize your content using Lambda@Edge, which you execute as Lambda functions before CloudFront delivers it to your users, without having to provision or manage your servers. Lambda@Edge can be created in the US-East-1 region using Node.js or Python and then it can be executed closer to your user. Lambda@Edge can scale automatically from a couple of requests per day to hundreds and thousands of requests per second, which significantly improves your user experience.</p>
<p class="indent">CloudFront intercepts user requests and responses at CloudFront edge locations when you associate the CloudFront distribution with a Lambda@Edge function. The Lambda@Edge functions can be executed when CloudFront receives a request from your user, or just before CloudFront forwards a request to the origin, or when it receives a response from your S3 bucket or HTTP web server, or just before CloudFront returns the response to your user. The Lambda@Edge function inspects cookies and modifies URLs so that users can see different versions of a site for A/B testing. Based on the user device, CloudFront returns different objects to users, like different images based on the screen size of the device, by checking the User-Agent header. For example, on a video library website that rents movies online, a Lambda@Edge function can change the request so that CloudFront returns the list of movies in the selected genre.</p>
<p class="indent">When CloudFront user request or origin request events occur, the Lambda@Edge function generates HTTP responses, inspects the headers or authorization tokens, and inserts a header to limit access to your content before forwarding the request to your origin. The Lambda@Edge function can make external network calls to verify user credentials or fetch additional content to customize your response. You choose the CloudFront distribution and cache behavior that specifies one or more CloudFront events, which are also called triggers, that execute the function. When you can create a trigger, it is replicated to AWS locations around the world and executes the function whenever CloudFront receives a request from a user.</p>
<h3 class="h3" id="ch6lev1sec15">Chapter Review</h3>
<p class="noindent">This chapter began by explaining how CloudFront helps to distribute your content and exposes it as a CloudFront link with low latency and high data transfer speeds in an easy and cost-effective way. An Amazon S3 bucket or your web HTTP EC2 server can be configured as origin servers that store the original contents. CloudFront retrieves your files from the origin server and then distributes them to CloudFront edge locations all over the world. CloudFront uses a pay-as-you-go model, and it doesn’t require you to commit to how much content you’ll have in your origin and you don’t have to pay any up-front <span epub:type="pagebreak" id="page_175"/>fees—you pay only for what you use. CloudFront regional edge caches save your popular content to serve users in different regions by bringing it closer to your users to improve performance. Regional edge caches are deployed globally and located between your origin server and the global edge locations to serve content directly to your users. You can secure your content by configuring HTTPS encrypted connections, or by using AWS WAF, or by setting up field-level encryption.</p>
<p class="indent">Users from specific geographic locations can be prevented from accessing content distributed through CloudFront web distributions. You can restrict access to your content in edge caches by configuring CloudFront to require users to use either signed URLs or signed cookies. A signed URL contains a policy statement in JSON format that specifies the restrictions, like an expiration date and time, that gives you more control over access to your content. You can prevent your users from directly accessing files using Amazon S3 URLs, bypassing CloudFront. OAI is a special CloudFront user that needs to be granted the identity permission to read the files in your bucket and remove any other permissions to use Amazon S3 URL. When you have geographic restrictions that are more granular than country boundaries or when you want to limit access to only few of the files, you need to combine CloudFront with a third-party geolocation service. Field-level encryption adds another layer of security along with HTTPS, which enforces secure end-to-end connections to origin servers and lets you protect specific data throughout system processing by making sure only certain applications can see it. A CloudFront distribution defines where content is delivered from and when you want to distribute your content and the details about how to track and manage content delivery. An alternate domain name, which is also called a CNAME, allows you to use your own domain name instead of using the random domain name that CloudFront assigns to your distribution for your file links. WebSocket, a TCP-based protocol, is used for long-lived bidirectional connections between clients and servers. Cache hit ratio refers to where the contents are served, whether from CloudFront edge caches (cache hit) or from your origin servers (cache miss). CloudFront processes user requests and forwards them to your origin and then processes the responses from your origin and caches 4xx and 5xx HTTP status codes. You can customize your content using Lambda@Edge, which you execute as Lambda functions before CloudFront delivers it to your users, without having to provision or manage servers.</p>
<h4 class="h4" id="ch6lev2sec19">Exercises</h4>
<p class="noindent">The following exercises will help you practice to using the console to perform various administrative tasks. You need to create an AWS account, as explained earlier, to perform these exercises. You can use the Free Tier when launching AWS resources, but make sure to terminate them at the end.</p>
<h5 class="h5">Exercise 6-1: Create an S3 Bucket for Your Content Origin</h5>
<p class="noindent">In this exercise, you will create a S3 bucket using the console.</p>
<p class="numbert"><strong>1.</strong> Sign in to the AWS Management Console and open the Amazon S3 console at <a href="https://console.aws.amazon.com/s3/">https://console.aws.amazon.com/s3/</a>.</p>
<p class="number"><strong>2.</strong> From the Amazon S3 console, choose Create Bucket.</p>
<p class="number"><strong>3.</strong> <span epub:type="pagebreak" id="page_176"/>In the Create Bucket dialog, on the Name And Region page, enter a bucket name and select an AWS region for your bucket.</p>
<p class="number"><strong>4.</strong> Choose Next.</p>
<p class="number"><strong>5.</strong> On the Configure Options page, choose options for versioning, tagging, and other features.</p>
<p class="number"><strong>6.</strong> Choose Next.</p>
<p class="number"><strong>7.</strong> On the Set Permissions page, uncheck the Block All Public Access checkbox.</p>
<p class="number"><strong>8.</strong> Choose Next, and then choose Create Bucket.</p>
<p class="number"><strong>9.</strong> Choose your bucket in the Buckets pane, and then choose Upload.</p>
<p class="number1"><strong>10.</strong> On the Select Files page, drag and drop your files to the bucket, or choose Add Files and choose the files that you want to upload.</p>
<p class="number1"><strong>11.</strong> Choose Next.</p>
<p class="number1"><strong>12.</strong> On the Set Permissions page, grant public read privileges for each file that you upload to your Amazon S3 bucket.</p>
<p class="number1"><strong>13.</strong> Choose Next to set permissions.</p>
<p class="number1"><strong>14.</strong> In the Manage Public Permissions drop-down list, choose Grant Public Read Access To This Object(s).</p>
<p class="number1"><strong>15.</strong> Choose Next.</p>
<p class="number1"><strong>16.</strong> Set any properties that you want for the object, such as encryption or tagging, and then choose Next.</p>
<p class="number1"><strong>17.</strong> Choose Upload.</p>
<p class="number1"><strong>18.</strong> After the upload completes, you can navigate to the item by using its URL. You can use the following URL to access the content:</p>
<p class="numberc"><img alt="Images" src="p0176-01.jpg"/></p>
<h5 class="h5">Exercise 6-2: Create CloudFront Distribution</h5>
<p class="noindent">In this exercise, you will gain practical experience of creating your first CloudFront distribution using the AWS Management Console.</p>
<p class="numbert"><strong>1.</strong> Open the CloudFront console at <a href="https://console.aws.amazon.com/cloudfront/">https://console.aws.amazon.com/cloudfront/</a>.</p>
<p class="number"><strong>2.</strong> Choose Create Distribution.</p>
<p class="number"><strong>3.</strong> On the Select A Delivery Method for your content page, in the Web section or the RTMP section, choose Get Started.</p>
<p class="number"><strong>4.</strong> On the Create Distribution page, under Origin Settings, choose the Amazon S3 bucket that you created earlier. For the Origin ID, Path, Restrict Access, and Custom Headers, you can accept the default values.</p>
<p class="number"><strong>5.</strong> Below the default Cache Behavior Settings, accept the default values.</p>
<p class="number"><strong>6.</strong> <span epub:type="pagebreak" id="page_177"/>Under Distribution Settings, choose the values for your distribution.</p>
<p class="number"><strong>7.</strong> For the Price Class option, choose Use All Edge Locations (Best Performance), which is default, where CloudFront serves your objects from the edge locations in all CloudFront regions.</p>
<p class="number"><strong>8.</strong> For the AWS WAF Web ACL option, choose None, unless you want to use the AWS WAF to allow or block HTTP and HTTPS requests.</p>
<p class="number"><strong>9.</strong> For the Alternate Domain Names (CNAMEs) option, specify the domain name that you want to use for URLs for your objects instead of the CloudFront domain name when you create your distribution. The following video content:</p>
<p class="numberc"><img alt="images" src="p0177-01.jpg"/></p>
<p class="numbern">will look like this if you configure CNAME:</p>
<p class="numberc"><img alt="images" src="p0177-02.jpg"/></p>
<p class="numbern">and like this if you use the random generated URL:</p>
<p class="numberc"><img alt="images" src="p0177-03.jpg"/></p>
<p class="number1"><strong>10.</strong> For the SSL Certificate, accept the default value: Default CloudFront Certificate.</p>
<p class="number1"><strong>11.</strong> Select Default Root Object, which is the object that you want CloudFront to request from your origin.</p>
<p class="number1"><strong>12.</strong> If you want CloudFront to log information about each request for an object and store the log files in an Amazon S3 bucket, select On.</p>
<p class="number1"><strong>13.</strong> Select Off for Cookie Logging.</p>
<p class="number1"><strong>14.</strong> Enter any comments that you want to save with the distribution.</p>
<p class="number1"><strong>15.</strong> Select Enabled for the Distribution States if you want CloudFront to begin processing requests as soon as the distribution is created.</p>
<p class="number1"><strong>16.</strong> Choose Create Distribution.</p>
<p class="number1"><strong>17.</strong> Once CloudFront finishes creating your distribution, the Status column value of your distribution will change from InProgress to Deployed, and it usually takes between 20 and 40 minutes.</p>
<p class="number1"><strong>18.</strong> Check the CloudFront.</p>
<p class="number1"><strong>19.</strong> Check the domain name for the distribution in the Domain Name column. You can see your domain name here.</p>
<p class="number1"><strong>20.</strong> Open your browser and type the domain name to access the domain.</p>
<p class="number1"><strong>21.</strong> You can use the <span class="code">dig</span> command and look up the domain name of your distribution. You will see that your domain name returns several global IP addresses and their edge locations from all over the world. The IP addresses could be different when you search the record because CloudFront automatically routes requests for the content by using the following command:</p>
<p class="numberc"><img alt="images" src="p0177-04.jpg"/></p>
<h5 class="h5"><span epub:type="pagebreak" id="page_178"/>Exercise 6-3: Configure an Alias Record (CNAMEs) for the CloudFront Distribution</h5>
<p class="noindent">In this exercise, you will gain practical experience configuring an Alias record CloudFront distribution using the AWS Management Console.</p>
<p class="numbert"><strong>1.</strong> Sign in to the AWS Management Console and move to the Route 53 console at</p>
<p class="numberc"><img alt="images" src="p0178-01.jpg"/></p>
<p class="number"><strong>2.</strong> In the Dashboard section on the left-hand side, click on Hosted Zones.</p>
<p class="number"><strong>3.</strong> Check the Domain Name box in which you want to create an alias record</p>
<p class="number"><strong>4.</strong> Here click on Create Record Set.</p>
<p class="number"><strong>5.</strong> Enter the following applicable values for each setting and click Create:</p>
<p class="bullet2">• In the Name box, enter your record name.</p>
<p class="bullet2">• In the Type box, use the default value: A – IPv4 address.</p>
<p class="bullet2">• In the Alias box, choose Yes.</p>
<p class="bullet2">• In the Alias Target box, enter the CloudFront domain name for your distribution.</p>
<p class="number"><strong>6.</strong> Move to the CloudFront console, check the distribution, and click Distribution Settings.</p>
<p class="number"><strong>7.</strong> In the General tab, click Edit.</p>
<p class="number"><strong>8.</strong> In the Alternate Domain Names (CNAMEs) box, enter the alias record name, and click Yes, Edit.</p>
<p class="number"><strong>9.</strong> Open your favorite browser and type the alias record to access the URL.</p>
<h4 class="h4" id="ch6lev2sec20">Questions</h4>
<p class="noindent">The following questions will help you gauge your understanding of the contents in this chapter. Read all the answers carefully because there might be more than one correct answer. Choose the best answers for each question.</p>
<p class="numbert"><strong><a href="ch06.xhtml#rch06qa1" id="ch06qa1">1.</a></strong> Your company is building an application to distribute confidential business videos to its employees. Using CloudFront, which of the following methods could be used to serve the content that is stored in S3 but is not publicly accessible from S3 directly?</p>
<p class="alphau"><strong>A.</strong> Create an origin access identity (OAI) for CloudFront and grant access to the objects in your S3 bucket to that OAI and remove any other permission to use Amazon S3.</p>
<p class="alphau"><strong>B.</strong> Add the CloudFront account security group and add inbound/outbound rules.</p>
<p class="alphau"><strong>C.</strong> Create a standard IAM user for CloudFront and grant write access to the objects in your S3 bucket to that user.</p>
<p class="alphau"><strong>D.</strong> Create a S3 bucket policy to allow public access to all the objects.</p>
<p class="number"><strong><a href="ch06.xhtml#rch06qa2" id="ch06qa2">2.</a></strong> <span epub:type="pagebreak" id="page_179"/>Your company web application has added new product images on each page. The application is hosted in US-West, and your users from US-East are experiencing latency when these images are loading. What is the best way to speed up serving these images?</p>
<p class="alphau"><strong>A.</strong> Use Application Load Balancer to serve the images to US-West as well as US-East.</p>
<p class="alphau"><strong>B.</strong> Serve the images through CloudFront edge locations closer to your users in US-East.</p>
<p class="alphau"><strong>C.</strong> Serve the image using Amazon S3 instead of serving from your web application.</p>
<p class="alphau"><strong>D.</strong> Use an instance store instead of EBS volume to serve the images faster from your EC2 instances.</p>
<p class="number"><strong><a href="ch06.xhtml#rch06qa3" id="ch06qa3">3.</a></strong> Your customer application has new requirements to support multiple devices such as iOS, Android, and Desktop to deliver the content. How this can be implemented efficiently?</p>
<p class="alphau"><strong>A.</strong> Store the video contents to Amazon S3 as an origin server and configure the Amazon CloudFront distribution with a streaming option.</p>
<p class="alphau"><strong>B.</strong> Store the video contents to Amazon S3 as an origin server and configure the Amazon CloudFront distribution to forward CloudFront-Is-Desktop-Viewer and CloudFront-Is-Mobile-Viewer headers from your custom origin.</p>
<p class="alphau"><strong>C.</strong> Launch a streaming server on EC2 and store the video contents as an origin server and configure the Amazon CloudFront distribution with a download option.</p>
<p class="alphau"><strong>D.</strong> Launch a streaming server on EC2 and store the video contents as an origin server and configure the required amount of streaming servers on Amazon EC2.</p>
<p class="number"><strong><a href="ch06.xhtml#rch06qa4" id="ch06qa4">4.</a></strong> You are a developer for a video training application that can be accessed anywhere in the world, and your users can choose their own topic training videos. Since the application can also be used on a mobile phone, connection stability is required for streaming content, and delivery should be quick. What solution will optimize the user experience to view the content?</p>
<p class="alphau"><strong>A.</strong> Upload and store the content in a EBS volume, and use a CloudFront distribution for content delivery.</p>
<p class="alphau"><strong>B.</strong> Upload and store the content in an S3 bucket in the region closest to the user and share the S3 object URL with the users.</p>
<p class="alphau"><strong>C.</strong> Upload the content to an EC2 instance in the region closest to the user and use a CloudFront distribution for content delivery.</p>
<p class="alphau"><strong>D.</strong> Upload the content to a central S3 bucket and use CloudFront distribution for delivering the content by using the edge locations closest to the user.</p>
<p class="number"><strong><a href="ch06.xhtml#rch06qa5" id="ch06qa5">5.</a></strong> <span epub:type="pagebreak" id="page_180"/>Which of the following options do you need to enable end-to-end HTTPS connections from the user’s browser to the origin via CloudFront?</p>
<p class="alphau"><strong>A.</strong> Use a self-signed certificate in the origin and CloudFront default certificate in CloudFront.</p>
<p class="alphau"><strong>B.</strong> You can use the CloudFront default certificate for both the origin and CloudFront.</p>
<p class="alphau"><strong>C.</strong> You need to use a third-party certificate authority (CA) certificate in the origin, and you need to use CloudFront’s default certificate for CloudFront.</p>
<p class="alphau"><strong>D.</strong> Use a self-signed certificate in both the origin and CloudFront.</p>
<p class="number"><strong><a href="ch06.xhtml#rch06qa6" id="ch06qa6">6.</a></strong> Your application serves all its requests through an ELB, which is in front of an EC2 Auto Scaling group. There are large traffic spikes during certain periods of the day because many people are requesting to read similar data at the same time. What is the easiest and cheapest way to fix this issue by reducing costs and scale only during a spike like this?</p>
<p class="alphau"><strong>A.</strong> Create an S3 bucket and asynchronously replicate common request responses into S3 objects and redirect the request to AWS S3.</p>
<p class="alphau"><strong>B.</strong> Create a new ELB and new Auto Scaling Group layer mounted on top of your system, adding a new tier to the system. Then you can serve most of your read requests using the top layer.</p>
<p class="alphau"><strong>C.</strong> Create a CloudFront distribution and direct ELB traffic to it. Use the ELB as an origin and specify cache behaviors to proxy cache requests.</p>
<p class="alphau"><strong>D.</strong> Create a Memcached cluster in AWS ElastiCache and create cache logic to serve requests, which can be served from the in-memory cache to increase performance.</p>
<p class="number"><strong><a href="ch06.xhtml#rch06qa7" id="ch06qa7">7.</a></strong> You are developing a new application that aggregates a huge volume of data and delivers it on demand to your users. The requests are extremely spiky and geographically distributed and unpredictable. How you can make sure your users from all over the world experience a good response, low latency, and cost-effectiveness?</p>
<p class="alphau"><strong>A.</strong> Use a large RedShift cluster to perform the analysis and a fleet of Lambdas to perform record inserts into the RedShift tables, and it will scale rapidly enough for the traffic spikes.</p>
<p class="alphau"><strong>B.</strong> Use a CloudFront distribution with access to an S3 origin. Aggregated data should be sent to S3 periodically in the desired format.</p>
<p class="alphau"><strong>C.</strong> Invoke Lambda using an API gateway that puts records into Kinesis and an EMR running Spark to get records on Kinesis to scale with spikes.</p>
<p class="alphau"><strong>D.</strong> Use the AWS Elasticsearch service and EC2 Auto Scaling groups and to scale based on traffic throughput and stream into the Elasticsearch domain, which is scalable.</p>
<p class="number"><strong><a href="ch06.xhtml#rch06qa8" id="ch06qa8">8.</a></strong> <span epub:type="pagebreak" id="page_181"/>A website is serving on-demand videos. Users are distributed globally, are often on the move, and are using mobile devices and tablets to watch videos. This website requires you to pay for videos. How can you implement the most cost-efficient architecture with a high quality of video delivery?</p>
<p class="alphau"><strong>A.</strong> Use Amazon S3 to host videos and CloudFront to serve videos from S3.</p>
<p class="alphau"><strong>B.</strong> Use Amazon S3 to host videos with lifecycle management to archive all files to Glacier after a few days and then use CloudFront to serve videos from Glacier.</p>
<p class="alphau"><strong>C.</strong> Use an EC2 HTTP web server to host the videos, and use EFS to incrementally back up the original videos. Use CloudFront to serve the videos from EFS.</p>
<p class="alphau"><strong>D.</strong> Use EC2 and Auto Scaling to adjust the number of nodes depending on the demand. Use EBS volumes to host videos, and use CloudFront to serve videos from EC2.</p>
<p class="number"><strong><a href="ch06.xhtml#rch06qa9" id="ch06qa9">9.</a></strong> You are developing an application that delivers high-quality HD videos to your users on demand globally. What type of server should be used to speed up the delivery of your HD video content by caching content closer to users?</p>
<p class="alphau"><strong>A.</strong> Edge server</p>
<p class="alphau"><strong>B.</strong> Origin server</p>
<p class="alphau"><strong>C.</strong> Base server</p>
<p class="alphau"><strong>D.</strong> Remote server</p>
<p class="number1"><strong><a href="ch06.xhtml#rch06qa10" id="ch06qa10">10.</a></strong> CloudFront uses a pay-as-you-go pricing model. Which of the following factors about CloudFront pricing are true? (Choose all that apply.)</p>
<p class="alphau"><strong>A.</strong> You need to pay for the standard Amazon S3 storage charges in your bucket.</p>
<p class="alphau"><strong>B.</strong> You incur charges when CloudFront responds to requests for your objects, which include the data transfer charges from server to client.</p>
<p class="alphau"><strong>C.</strong> You incur charges when users transfer data to your origin, including DELETE, OPTIONS, PATCH, POST, and PUT requests.</p>
<p class="alphau"><strong>D.</strong> You incur a surcharge for HTTPS requests and an additional surcharge for requests that use field-level encryption.</p>
<p class="number1"><strong><a href="ch06.xhtml#rch06qa11" id="ch06qa11">11.</a></strong> In CloudFront what happens when content is NOT present at an edge location and a request is made to it?</p>
<p class="alphau"><strong>A.</strong> A “404 not found” error is returned.</p>
<p class="alphau"><strong>B.</strong> CloudFront serves the content directly from the origin server and also stores it in the cache.</p>
<p class="alphau"><strong>C.</strong> The request is kept on hold till until origin content is stored on the edge location.</p>
<p class="alphau"><strong>D.</strong> The request is routed to the next nearby edge location for delivery.</p>
<p class="number1"><strong><a href="ch06.xhtml#rch06qa12" id="ch06qa12">12.</a></strong> <span epub:type="pagebreak" id="page_182"/>Which of the following events can be triggered with Amazon CloudFront? (Choose all that apply.)</p>
<p class="alphau"><strong>A.</strong> A Viewer Request event occurs when an end user or a device on the Internet makes an HTTP(S) request to CloudFront and the request arrives at the edge location closest to that user.</p>
<p class="alphau"><strong>B.</strong> A Viewer Response event occurs when the CloudFront server at the edge is ready to respond to the end user or the device that made the request.</p>
<p class="alphau"><strong>C.</strong> An Origin Request event occurs when edge server does not already have the requested object ready to be sent to your backend origin.</p>
<p class="alphau"><strong>D.</strong> An Origin Response event occurs when the CloudFront server at the edge receives a response from your backend origin webserver.</p>
<h4 class="h4" id="ch6lev2sec21">Answers</h4>
<p class="numbert"><strong><a href="ch06.xhtml#ch06qa1" id="rch06qa1">1.</a> A.</strong> You need to create an OAI for CloudFront and grant access to the objects in your S3 bucket to it and remove any other permission to use Amazon S3.</p>
<p class="number"><strong><a href="ch06.xhtml#ch06qa2" id="rch06qa2">2.</a> B.</strong> You need to use CloudFront and serve the images through edge locations closer to your users in US-East.</p>
<p class="number"><strong><a href="ch06.xhtml#ch06qa3" id="rch06qa3">3.</a> B.</strong> You need to store the video contents to Amazon S3 as an origin server and configure the Amazon CloudFront distribution to forward CloudFront-Is-Desktop-Viewer and CloudFront-Is-Mobile-Viewer headers to your custom origin.</p>
<p class="number"><strong><a href="ch06.xhtml#ch06qa4" id="rch06qa4">4.</a> D.</strong> You need to upload the content to a central S3 bucket and use CloudFront distribution to deliver the content by using the edge locations closest to the user, which reduces the latency.</p>
<p class="number"><strong><a href="ch06.xhtml#ch06qa5" id="rch06qa5">5.</a> C.</strong> You need to use a third-party CA certificate in the origin and a CloudFront default certificate in CloudFront. The origin cannot be self-signed and cannot use the CloudFront default certificate.</p>
<p class="number"><strong><a href="ch06.xhtml#ch06qa6" id="rch06qa6">6.</a> C.</strong> You need to create a CloudFront distribution and direct all your Elastic Load Balancer traffic to that. Also you can use the ELB as an origin for specifying cache behaviors to proxy cache requests.</p>
<p class="number"><strong><a href="ch06.xhtml#ch06qa7" id="rch06qa7">7.</a> B.</strong> You need to use a CloudFront distribution with access to the S3 origin. All your aggregated data should be sent to S3 periodically in the desired format that users access regularly.</p>
<p class="number"><strong><a href="ch06.xhtml#ch06qa8" id="rch06qa8">8.</a> C.</strong> The AWS SAM Local CLI tool is used for local development and testing of serverless applications (i.e., AWS Lambda functions).</p>
<p class="number"><strong><a href="ch06.xhtml#ch06qa9" id="rch06qa9">9.</a> A.</strong> An edge server is used to speed the delivery of content using a variety of techniques for caching content closer to users.</p>
<p class="number1"><strong><a href="ch06.xhtml#ch06qa10" id="rch06qa10">10.</a> A, B, C, D.</strong> You need to pay for charges for storage, charges for serving objects. charges for submitting data, and additional surcharge for HTTPS requests.</p>
<p class="number1"><strong><a href="ch06.xhtml#ch06qa11" id="rch06qa11">11.</a></strong> <span epub:type="pagebreak" id="page_183"/><strong>B.</strong> This CloudFront delivers the content directly from the origin server and stores it in the cache of the edge location.</p>
<p class="number1"><strong><a href="ch06.xhtml#ch06qa12" id="rch06qa12">12.</a> A, B, C, D.</strong> A Viewer Request event occurs when an end user or a device on the Internet makes an HTTP(S) request to CloudFront. A Viewer Response event occurs when the CloudFront server at the edge is ready to respond to the end user. An Origin Request event occurs when the CloudFront edge server does not already have the requested object in its cache. An Origin Response event occurs when the CloudFront server at the edge receives a response from your backend origin web server.</p>
<h3 class="h3" id="ch6lev1sec16">Additional Resources</h3>
<p class="bullett">• <strong>Dynamic Application Content Delivery Using Amazon CloudFront</strong>   There is no place like official AWS documentation to get the latest and most up-to-date information about all the AWS services. Always refer to the official AWS blogs to get the latest about new AWS services and updates. This blog explains the steps, including a launch stack, to create an Amazon S3 bucket for static content, to create a web server on an Amazon EC2 for your dynamic content, and to create a CloudFront web distribution to deliver both dynamic and static content to users.</p>
<p class="bulletc"><img alt="images" src="p0183-01.jpg"/></p>
<p class="bulleta">• <strong>Debugging Your Content Delivery</strong>   This blog provides four steps to enable logging on CloudFront, setting up alarms using Amazon SNS and Amazon CloudWatch, and using the CloudFront Monitoring Dashboard to review errors and troubleshoot issues.</p>
<p class="bulletc"><img alt="images" src="p0183-02.jpg"/></p>
<p class="bulleta">• <strong>Aggregating Lambda@Edge Logs</strong>   This blog provides detailed steps to aggregate Lambda@Edge logs from different regions into a single region and use CloudWatch logs, Kinesis, and Amazon S3 for troubleshooting and analysis.</p>
<p class="bulletc"><img alt="images" src="p0183-03.jpg"/></p>
<p class="bulleta">• <strong>Analyze Amazon CloudFront Access Logs</strong>   This blog describe the steps, including launch stacks, to store access logs with detailed information of every request to the Amazon Simple Storage Service (S3) and AWS Glue Data Catalog for this data and to query your data in S3 using Amazon Athena.</p>
<p class="bulletc"><img alt="images" src="p0183-04.jpg"/></p>
<p class="bulleta">• <span epub:type="pagebreak" id="page_184"/><strong>Lambda@Edge and CloudFront Deployments Using a CI/CD Pipeline</strong>   This blog explains in detail how to use AWS CloudFormation to deploy and modify a Lambda@Edge function with a CloudFront and create a CI/CD pipeline to automate and validate your changes automatically by using a Lambda function.</p>
<p class="bulletc"><img alt="images" src="p0184-01.jpg"/></p>
</section>
</body>
</html>