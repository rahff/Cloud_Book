<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:svg="http://www.w3.org/2000/svg" lang="en" xml:lang="en">
<head>
<title>AWS Certified Developer Associate All-in-One Exam Guide (Exam DVA-C01)</title>
<link href="1260460177.css" rel="stylesheet" type="text/css"/>
<meta content="urn:uuid:c4d348f1-9c3d-457f-b76a-654174c9fde1" name="Adept.expected.resource"/>
</head>
<body>
<section epub:type="chapter">
<h2 class="h2c" id="ch18"><span epub:type="pagebreak" id="page_457"/><span class="chap">CHAPTER <span class="chap1">18</span></span></h2>
<h2 class="h2c1">Infrastructure as Code Using AWS CloudFormation</h2>
<p class="noindent">In this chapter, you will learn</p>
<p class="bulleta">• Templates</p>
<p class="bulleta">• Stacks</p>
<p class="bulleta">• Change sets</p>
<p class="hr"/>
<p class="noindentb">In this chapter, we will discuss what AWS CloudFormation is and how templates, stacks, and change sets work to automate your infrastructure using code.</p>
<h3 class="h3" id="ch18lev1sec1">AWS CloudFormation</h3>
<p class="noindent">The AWS CloudFormation service enables you to design and create your AWS resources in an automated and secure manner. It helps reduce the time for creating and managing your AWS resources and allows you to focus on your applications that run in AWS. The AWS CloudFormation template describes all the AWS resources and takes care of provisioning the resources for you. It handles the dependencies when you create and configure your AWS resources and third-party application resources in your AWS cloud environment across all regions and accounts. It acts as a single source for your AWS and third-party resources and helps you to standardize infrastructure components used across your organization, enabling configuration compliance and faster troubleshooting. Your application resources can be provisioned in a secure, reusable fashion, allowing you to build and re-create your infrastructure and applications without having to perform manual actions or write custom scripts. You don’t need to determine the right operations to perform when managing your stack or worry about orchestrating them in the most efficient way or terminating all the resources by rolling back changes automatically if any errors are identified.</p>
<p class="indent">You can treat your infrastructure just as code and create it with a code editor of your choice and can check it into a version control system and then review and deploy it into production. Creating and managing a set of AWS resources is made simple and easy by provisioning and updating them in a predictable order by your developers and <span epub:type="pagebreak" id="page_458"/>systems administrators. AWS provides sample CloudFormation templates, or you can create custom templates that describe the AWS resources, dependencies, and runtime parameters. The AWS CloudFormation registry can be used to design, provision, and manage third-party application resources like incident management or version control tools. You can use the AWS CloudFormation Command Line Interface (CLI) to develop and test the infrastructure as code in a text file in either JSON or YAML format. AWS CloudFormation Designer can be used to design visually, and AWS Cloud Development Kit can be used to build your cloud application resources using programming languages like TypeScript, Python, Java, and .NET directly from your integrated development environment (IDE). AWS CloudFormation helps you avoid manual steps to provision the infrastructure, which helps minimize errors. Rollback triggers can be used to create a CloudWatch alarm that monitors the stack creation and update processes. It rolls back the entire stack operation to a previous deployed state when any of the alarms are breached.</p>
<p class="indent">The change sets can be used to preview the impact of proposed changes to determine whether they will delete or replace any of your critical resources. AWS CloudFormation makes the changes to your stack only after you decide to execute the change set. AWS CloudFormation automatically manages the AWS resource dependencies and the order in which resources are created, updated, or deleted during stack creation. AWS StackSets can be used to provision, update, and delete a common set of AWS resources across multiple accounts and regions with a single CloudFormation template, which determines the correct sequence of actions when performing stack operations. This provides the same level of automation, repeatability, and reliability to stack management operations across regions and accounts.</p>
<p class="indent">When architecting a highly scalable e-commerce web application that requires an Auto Scaling group to spin up an EC2 instance based on demand, use an Elastic Load Balancing load balancer to divert huge volumes of traffic, an Amazon Relational Database Service database instance for persistent storage, Amazon SQS to exchange data between applications, Amazon SNS for notification, Amazon S3 bucket and Amazon CloudFront to deliver static contents, Amazon Cognito for temporary access, and Amazon Route 53 for the domain name system. You can provision each individual service and configure them to work together in your AWS account for your development environment. By the time your e-commerce application is up and running, all these manual tasks become very complex and time consuming otherwise.</p>
<p class="indent">The AWS CloudFormation template can be used to define all these resources and create an AWS CloudFormation stack, which provisions all the AWS services you need for your e-commerce application along with handling the dependency for you. When your e-commerce application is up and running, you can manage, update, or delete the stack easily as a single unit. You can use the stack to create the same e-commerce application in any of your other environments or AWS accounts. If you have decided to create your application in different regions for high availability and disaster recovery, you can reuse your AWS CloudFormation template stack to provision the same resources consistently over and over in multiple regions. It is easy to update or upgrade any of the resources <span epub:type="pagebreak" id="page_459"/>incrementally, like increasing the maximum number of instances in your Auto Scaling group, by simply tracking the differences in your templates and updating your infrastructure, like code. You can use any version control system for your templates to track changes and to know exactly when the changes were made, who made them, and what changes were made. You can easily reverse changes to your infrastructure by simply running the previous version of your template.</p>
<h4 class="h4" id="ch18lev2sec1">Templates</h4>
<p class="noindent">The AWS CloudFormation template uses the JSON and YAML format, which allows extensions like json, .yaml, .template, or .txt, and it uses these templates as blueprints for creating AWS resources. The following is the basic structure of a AWS CloudFormation template that describes which parameter is required and which parameters are optional ,along with descriptions of each.</p>
<p class="imagep"><img alt="images" src="p0459-01.jpg"/></p>
<p class="indent">Let us get started with practical AWS CloudFormation templates by creating simple templates using JSON, YAML, and Terraform formats. Since it’s one of the important services for the exam and in your daily job, I will explain a few sample templates that teach and reinforce the AWS CloudFormation templates.</p>
<h5 class="h5"><span epub:type="pagebreak" id="page_460"/>Use the JSON Template to Create a Single AWS Resource</h5>
<p class="noindent">In the following simple JSON template, the AWSTemplateFormatVersion parameter does not use the current date—it uses 2010-09-09, which is the only valid date that should be used for all your AWS CloudFormation templates. Then the self-explanatory Description parameter is where you can write a description/comment for the template like “My Sample S3 template.” Resources is the only required parameter in a template, which describes what services will be created—for example, MyS3Bucket informs you that we are creating an S3 bucket. The Resource Type is AWS::S3::Bucket for creating an S3 bucket. The DeletionPolicy dictates whether to retain or delete the AWS after deleting the template stack, and Retain or Delete can be used. The Properties section contains relevant parameters to create the resource. The AccessControl parameter is defined as Private to keep it secure. The BucketEncryption parameter specifies what kind of encryption: Configuration or Algorithm. The BucketName parameter specifies the name for your bucket—for example, MyFirstS3Bucket. The VersioningConfiguration defines whether to keep different versions of the objects based on the Status parameter. Tags are another optional parameter, but it’s one of the important parameters with Key and Value, and it can be used to manage and organize your AWS resources.</p>
<p class="imagep"><img alt="images" src="p0460-01.jpg"/></p>
<h5 class="h5"><span epub:type="pagebreak" id="page_461"/>Use the YAML Template to Create a Single AWS Resource</h5>
<p class="noindent">The YAML template uses similar parameters as the JSON template to create an Amazon S3 bucket from the AWS Management Console or using CLI.</p>
<p class="imagep"><img alt="images" src="p0461-01.jpg"/></p>
<h5 class="h5">Use Terraform Script to Create a Single AWS Resource</h5>
<p class="noindent">HashiCorp’s Terraform (terraform.io) is another famous infrastructure as code used for building, updating, and versioning your infrastructure by many enterprises and can be used for multicloud provisioning. You can download it from <a href="https://www.terraform.io/downloads.html">https://www.terraform.io/downloads.html</a> and install Terraform based on your operating system. In this chapter, let us explore simple code that provisions an S3 bucket in AWS:</p>
<p class="imagep"><img alt="images" src="p0461-02.jpg"/></p>
<p class="indent">First, you need to run “terraform init” using the earlier parameter to set the environment and configuration:</p>
<p class="imagep"><img alt="images" src="p0461-03.jpg"/></p>
<p class="indent"><span epub:type="pagebreak" id="page_462"/>Then use “terraform plan” to create the execution plan without making any changes to resources or to its state. This determines what actions are necessary to attain the desired state mentioned in the configuration files. Use “terraform apply” to apply the required changes to reach the desired state of your configuration. Finally, use “terraform destroy” to destroy the Terraform-managed resources, and you will be prompt for confirmation before deleting all the resources.</p>
<h5 class="h5">Use the JSON Template to Create Multiple AWS Resources</h5>
<p class="noindent">Now let us create multiple resources in a single template and configure how all the resources work together. The following template creates an Amazon EC2 instance and S3 bucket.</p>
<p class="imagep"><img alt="images" src="p0462-01.jpg"/></p>
<h5 class="h5"><span epub:type="pagebreak" id="page_463"/>Use the YAML Template to Create Multiple AWS Resources</h5>
<p class="noindent">Here is a sample YAML template for creating multiple AWS resources:</p>
<p class="imagep"><img alt="images" src="p0463-01.jpg"/></p>
<p class="indent"><span epub:type="pagebreak" id="page_464"/>In this sample using the YAML template, the AWSTemplateFormatVersion parameter uses 2010-09-09, which is the only valid date that should be used for all your AWS CloudFormation templates. Then the self-explanatory Description parameter is where you can write a description and comment for this template. Resources is the only mandatory parameter in a template, which describes what services will be created—for example, MyEC2Instance and MyS3Bucket specifies that we are creating an EC2 instance and S3 bucket. The Resource Types for this template are AWS::EC2::Instance and AWS::S3::Bucket for creating an EC2 instance and S3 bucket, respectively. The DeletionPolicy dictates whether to retain or delete the AWS after deleting the template stack. The Properties section contains relevant parameters to create the resource. The ImageId parameter specifies the image, and the InstanceType parameter specifies the instance size, like t2.medium. The KeyName specifies the key, like my-ssh-login-key that you already created, and can be used to log in to your new EC2 instance. The EBS volume BlockDeviceMappings specifies the DeviceName—for example, /dev/sda or /dev/sdb. The VolumeType specifies whether it is input/output optimized like io1. The Iops defines the Input Output per second, and DeleteOnTermination dictates whether to delete the volume. The VolumeSize parameter specifies the size of the volume. The AccessControl parameter is defined as Private to keep it secure. The BucketEncryption parameter specifies what kind of encryption: Configuration or Algorithm. The BucketName parameter specifies the name for your bucket—for example, MyFirstS3Bucket. The VersioningConfiguration defines whether to keep different versions of the objects based on the Status parameter. Tags are another optional parameter, but it’s one of the important parameters with Key and Value, and it can be used to manage and organize your AWS resources.</p>
<h5 class="h5">Use the Terraform Script to Create Multiple AWS Resources</h5>
<p class="noindent">The Terraform script can be used to create an EC2 instance and S3 bucket by using the terraform init, plan, and apply commands:</p>
<p class="imagep"><img alt="images" src="p0464-01.jpg"/></p>
<p class="indent"><span epub:type="pagebreak" id="page_465"/>The “terraform init” will set up the configuration of your AWS environment, and the “terraform plan” will be used to create the execution plan without making any changes to resources or to its existing state or creating new ones. In addition, “terraform plan” determines what actions are necessary to attain the desired state mentioned in the configuration files. Then run “terraform apply” to create a t2.medium EC2 instance and S3 bucket with versioning enabled. Both the EC2 instance and S3 bucket will have name, owner, and contact tags. You can use the AWS CloudFormation templates in JSON or YAML or use Terraform to build a complex set of resources with additional capabilities, and the templates can be reused to create multiple environments like Development, QA, Stage, and Production.</p>
<h4 class="h4" id="ch18lev2sec2">Stacks</h4>
<p class="noindent">AWS CloudFormation stacks can be used to create and manage related resources as a single unit. The collection of your AWS resources is defined in a stack, and AWS CloudFormation takes care of creating, updating, and deleting all stack resources. AWS CloudFormation either creates all the resources in a stack successfully or rolls back everything by deleting any resources that were created before the failure. You incur charges for the stack resources for its operation or uptime until it is completely deleted or terminated. You can create stacks based on the environment or application, based on how you want to relate the AWS resources. For example, if you are creating an e-commerce application that requires web servers, application servers, a database, a load balancer, and other networking services along with firewall rules, you can use an AWS CloudFormation stack to create all the e-commerce application resources, and they can be updated or deleted as a single unit. You can create, update, and delete the stack using the AWS CloudFormation console, API, or AWS CLI. You can create the e-commerce application resources in another environment by just submitting the template, and AWS CloudFormation provisions all the resources for you.</p>
<h5 class="h5"><span epub:type="pagebreak" id="page_466"/>Updating a Stack</h5>
<p class="noindent">Often, you will need to update resources, but you can update the stack template instead of creating a new stack and deleting the old stack. You just need to submit the updated version of the original stack template, and AWS CloudFormation compares it with the original template and creates the change set, which lists all the proposed changes. You can execute the stack after reviewing the impact of your changes. AWS CloudFormation updates only the resources that you modified and restores the stack to the last known working state if there is any failure.</p>
<h5 class="h5">Deleting a Stack</h5>
<p class="noindent">When you no longer need your resources that you created—for example, your e-commerce application or proof of concept—then you can specify the stack to delete, and AWS CloudFormation deletes all the resources in that stack, including the stack itself. You can use the AWS CLI, API, or AWS CloudFormation console to delete the stack. The deletion policy Retain can be used to retain some resources in that stack if necessary. The stack will remain until all resources are successfully deleted. If any of the resources cannot be deleted or fail to delete, then the stack will not be deleted.</p>
<h4 class="h4" id="ch18lev2sec3">Change Sets</h4>
<p class="noindent">You can update the stack if you need to make changes to any of your running resources. A change set gives you a summary of the proposed changes to your resource before making any changes. This gives you the opportunity to check the impact to your critical resources, and you can implement the changes after the review. For example, if you want to change the instance type of your EC2 instance to increase the size, AWS CloudFormation will stop the instance, release its public IPv4 (unless you attached an elastic static IP), and move the instance to new hardware. The Amazon EC2 Auto Scaling service might mark the stopped EC2 instance as unhealthy and try launching a new replacement instance after terminating it. This instance start will fail if it’s part of a cluster placement group, and your change set displays the impact so you will be able to plan accordingly. You can update your stack after validating the impact and reports after all the resources have been created. AWS CloudFormation rolls back your changes by deleting the resources it created when a failure occurs when updating a stack.</p>
<h4 class="h4" id="ch18lev2sec4">Export</h4>
<p class="noindent">You can share information between stacks in the same AWS account and region using the export function instead of hard-coding the values or using input parameters in the template. You need to use the Export field in the Output section of your template, and you can use the Fn::ImportValue function to import those values. You can use ListImports to delete or modify exported output values.</p>
<h4 class="h4" id="ch18lev2sec5"><span epub:type="pagebreak" id="page_467"/>AWS CloudFormation Registry</h4>
<p class="noindent">You can use the CloudFormation registry to list the resources that are available to use in your AWS CloudFormation account. The resources can be either private ones that you created, as well as ones shared with you, or public resources provided by AWS. You need to register your private resources before you can use them. You can view resources in the CloudFormation registry after you have registered the resource provider and then you can start using them in your stack templates. You can use the <span class="code">submit</span> command in the AWS CloudFormation CLI or the <span class="code">register-type</span> command in the AWS CLI to register the resource provider.</p>
<h3 class="h3" id="ch18lev1sec2">Chapter Review</h3>
<p class="noindent">This chapter began by explaining what AWS CloudFormation is and how it is used as infrastructure as code. It then introduced templates, stacks, and change sets. The chapter provided examples using simple templates in JSON and YAML formats, in addition to a simple Terraform script that creates an S3 bucket. The AWS CloudFormation service enables you to design and create your AWS resources securely using automation. AWS CloudFormation handles the provision of your AWS resources, and it takes care of the dependencies of your AWS resources and third-party application resources. The AWS CloudFormation template uses the JSON and YAML format, which allows extensions like .json, .yaml, .template, or .txt, and it uses these templates as blueprints for creating AWS resources.</p>
<p class="indent">A AWS CloudFormation stack is the collection of your AWS resources, and AWS CloudFormation takes care of creating, updating, and deleting all stack resources in your AWS cloud environment across all regions and accounts. It either creates all the resources in a stack successfully or rolls back everything by deleting any resources that were created before the failure. You can create stacks based on the environment or application, based on how you want to relate the AWS resources. You can use an AWS CloudFormation stack to create e-commerce application resources, for example, and they can be updated or deleted as a single unit. You can create, update, and delete the stack using the AWS CloudFormation console, API, or AWS CLI. You can create the resources in another environment by just submitting the template, and AWS CloudFormation provisions all the resources.</p>
<p class="indent">A change set gives you a summary of the proposed changes to your resource before making any changes and to verify the impact to your critical resources before implementing them. You can execute your stack after validating the impact and reports after all the resources have been created. If a failure occurs when updating a stack, AWS CloudFormation rolls back your changes by deleting the resources it created.</p>
<h4 class="h4" id="ch18lev2sec6"><span epub:type="pagebreak" id="page_468"/>Exercise</h4>
<p class="noindent">The following exercise will help you practice using AWS CloudFormation templates. You need to create an AWS account, as explained earlier, to perform these exercises. You can use the Free Tier when launching AWS resources, but make sure to terminate them at the end.</p>
<h5 class="h5">Exercise 18-1: Create an AWS CloudFormation Template Using the AWS Management Console</h5>
<p class="numbert"><strong>1.</strong> Use your AWS account e-mail address and password to sign in and then navigate to the AWS CloudFormation Designer console at <a href="https://console.aws.amazon.com/cloudformation/">https://console.aws.amazon.com/cloudformation/</a>.</p>
<p class="number"><strong>2.</strong> Verify the AWS region by using the Region selector in the upper-right corner of the page.</p>
<p class="number"><strong>3.</strong> From the navigation pane on the left, choose Designer.</p>
<p class="image"><img alt="images" src="f0468-01.jpg"/></p>
<p class="number"><strong>4.</strong> <span epub:type="pagebreak" id="page_469"/>You will create a simple template using the Designer. From the list of resources available on the left side, select EC2 and expand as shown here.</p>
<p class="image"><img alt="images" src="f0469-01.jpg"/></p>
<p class="number"><strong>5.</strong> Select Instance from the Designer and drop it to the center pane. The template is created in the bottom pane in JSON.</p>
<p class="image"><img alt="images" src="f0469-02.jpg"/></p>
<p class="number"><strong>6.</strong> <span epub:type="pagebreak" id="page_470"/>The template can be automatically converted to a YAML template from the Designer, as shown next, and click on the checkbox symbol on top-left side of the Designer to verify this. For the ImageId type <strong>ami-0fc61db8544a617ed</strong> and for the InstanceType type <strong>t2.micro</strong> to create the instance in the Free Tier to avoid any charges.</p>
<p class="image"><img alt="Images" src="f0470-01.jpg"/></p>
<p class="number"><strong>7.</strong> <span epub:type="pagebreak" id="page_471"/>In order to create a stack, click on the up-arrow symbol on the top-left side of the Designer, which will take you to the next screen.</p>
<p class="image"><img alt="Images" src="f0471-01.jpg"/></p>
<p class="number"><strong>8.</strong> <span epub:type="pagebreak" id="page_472"/>Click on the Next button. Enter <strong>my-first-stack</strong> for the stack name, and click the Next button again, as shown here.</p>
<p class="image"><img alt="Images" src="f0472-01.jpg"/></p>
<p class="number"><strong>9.</strong> In the Configure Stack Options Screen, enter tags and click Next.</p>
<p class="image"><img alt="images" src="f0472-02.jpg"/></p>
<p class="number1"><strong>10.</strong> <span epub:type="pagebreak" id="page_473"/>The Review page lists all the configurations for verification before creating it. The illustration here does not show the entire page, but you should be able to verify this in your console page. After reviewing the configurations, click on Create Stack.</p>
<p class="image"><img alt="images" src="f0473-01.jpg"/></p>
<p class="number1"><strong>11.</strong> <span epub:type="pagebreak" id="page_474"/>You can view the stack creation and its progress, as shown next.</p>
<p class="image"><img alt="images" src="f0474-01.jpg"/></p>
<p class="number1"><strong>12.</strong> <span epub:type="pagebreak" id="page_475"/>Now you can navigate to EC2 service and verify the new instance that you created using the CloudFormation Template (CFT) Designer.</p>
<p class="image"><img alt="images" src="f0475-01.jpg"/></p>
<h4 class="h4" id="ch18lev2sec7">Questions</h4>
<p class="noindent">The following questions will help you gauge your understanding of the contents in this chapter. Read all the answers carefully because there might be more than one correct answer. Choose the best response for each question.</p>
<p class="numbert"><strong><a href="ch18.xhtml#rch18qa1" id="ch18qa1">1.</a></strong> Which of the following services provides infrastructure as code in AWS?</p>
<p class="alphau"><strong>A.</strong> Amazon EC2</p>
<p class="alphau"><strong>B.</strong> Amazon S3</p>
<p class="alphau"><strong>C.</strong> Amazon RDS</p>
<p class="alphau"><strong>D.</strong> AWS CloudFormation</p>
<p class="number"><strong><a href="ch18.xhtml#rch18qa2" id="ch18qa2">2.</a></strong> <span epub:type="pagebreak" id="page_476"/>Which of the following two formats are supported in AWS CloudFormation? (Choose two.)</p>
<p class="alphau"><strong>A.</strong> JSON</p>
<p class="alphau"><strong>B.</strong> YAML</p>
<p class="alphau"><strong>C.</strong> PPTX</p>
<p class="alphau"><strong>D.</strong> XLSX</p>
<p class="number"><strong><a href="ch18.xhtml#rch18qa3" id="ch18qa3">3.</a></strong> Which of the following parameters are required when creating an AWS CloudFormation template?</p>
<p class="alphau"><strong>A.</strong> Metadata</p>
<p class="alphau"><strong>B.</strong> Mappings</p>
<p class="alphau"><strong>C.</strong> Conditions</p>
<p class="alphau"><strong>D.</strong> Resources</p>
<p class="number"><strong><a href="ch18.xhtml#rch18qa4" id="ch18qa4">4.</a></strong> Which of the following parameters return the values of your stack resources after the successful creation of your stack?</p>
<p class="alphau"><strong>A.</strong> Outputs</p>
<p class="alphau"><strong>B.</strong> Transform</p>
<p class="alphau"><strong>C.</strong> Description</p>
<p class="alphau"><strong>D.</strong> Mappings</p>
<p class="number"><strong><a href="ch18.xhtml#rch18qa5" id="ch18qa5">5.</a></strong> What is the billing cycle for AWS CloudFormation, and how much you will need to pay?</p>
<p class="alphau"><strong>A.</strong> Pay as you go</p>
<p class="alphau"><strong>B.</strong> Reserved yearly</p>
<p class="alphau"><strong>C.</strong> Discounted monthly</p>
<p class="alphau"><strong>D.</strong> It is free</p>
<p class="number"><strong><a href="ch18.xhtml#rch18qa6" id="ch18qa6">6.</a></strong> You are creating an EC2 instance using the AWS CloudFormation template, and you need to create a web server and admin user. Which of the following parameters can be used to execute the script?</p>
<p class="alphau"><strong>A.</strong> AdditionalInfo</p>
<p class="alphau"><strong>B.</strong> Tags</p>
<p class="alphau"><strong>C.</strong> User data</p>
<p class="alphau"><strong>D.</strong> LaunchTemplate</p>
<p class="number"><strong><a href="ch18.xhtml#rch18qa7" id="ch18qa7">7.</a></strong> <span epub:type="pagebreak" id="page_477"/>The AWS CloudFormation template can be used to bootstrap using which of the following configuration management tools to automate and deploy servers in your AWS environment? (Choose three.)</p>
<p class="alphau"><strong>A.</strong> Chef</p>
<p class="alphau"><strong>B.</strong> Puppet</p>
<p class="alphau"><strong>C.</strong> Ansible</p>
<p class="alphau"><strong>D.</strong> ELK</p>
<p class="number"><strong><a href="ch18.xhtml#rch18qa8" id="ch18qa8">8.</a></strong> You deleted your stack successfully, and it returned a Delete_Complete state, but when you verify this, you notice a couple of resources were not deleted. What is the reason for this?</p>
<p class="alphau"><strong>A.</strong> You set DeletionPolicy to Delete</p>
<p class="alphau"><strong>B.</strong> You set DeletionPolicy to Retain</p>
<p class="alphau"><strong>C.</strong> You set DeletionPolicy to Snapshot</p>
<p class="alphau"><strong>D.</strong> You set DeletionPolicy to Keep</p>
<p class="number"><strong><a href="ch18.xhtml#rch18qa9" id="ch18qa9">9.</a></strong> Which managed service enables you to discover, register, and use private third-party resource providers and public AWS resources?</p>
<p class="alphau"><strong>A.</strong> AWS CloudFormation registry</p>
<p class="alphau"><strong>B.</strong> AWS CloudFormation template</p>
<p class="alphau"><strong>C.</strong> AWS CloudFormation stack</p>
<p class="alphau"><strong>D.</strong> AWS CloudFormation change set</p>
<p class="number1"><strong><a href="ch18.xhtml#rch18qa10" id="ch18qa10">10.</a></strong> You need to create few resources and delete a few resources from an existing AWS CloudFormation stack. Your manager is concerned about the impact of these changes. How can you verify the impact of changes to the stack without actually executing them?</p>
<p class="alphau"><strong>A.</strong> Create a change set</p>
<p class="alphau"><strong>B.</strong> Use nested stacks</p>
<p class="alphau"><strong>C.</strong> Use the CloudFormation registry</p>
<p class="alphau"><strong>D.</strong> Use Windows stacks</p>
<h4 class="h4" id="ch18lev2sec8">Answers</h4>
<p class="number"><strong><a href="ch18.xhtml#ch18qa1" id="rch18qa1">1.</a> D.</strong> The AWS CloudFormation service provides infrastructure as code in AWS.</p>
<p class="number"><strong><a href="ch18.xhtml#ch18qa2" id="rch18qa2">2.</a> A, B.</strong> JSON and YAML are the two formats supported in AWS CloudFormation.</p>
<p class="number"><strong><a href="ch18.xhtml#ch18qa3" id="rch18qa3">3.</a> D.</strong> Resources is the only required parameter in AWS CloudFormation.</p>
<p class="number"><strong><a href="ch18.xhtml#ch18qa4" id="rch18qa4">4.</a> A.</strong> The Outputs parameter returns the values of your stack resources after the successful creation of your stack.</p>
<p class="number"><strong><a href="ch18.xhtml#ch18qa5" id="rch18qa5">5.</a></strong> <span epub:type="pagebreak" id="page_478"/><strong>D.</strong> There is no additional charge for using AWS CloudFormation; you pay only for the AWS resources you create.</p>
<p class="number"><strong><a href="ch18.xhtml#ch18qa6" id="rch18qa6">6.</a> C.</strong> User data can be used to execute the bootstrap script during the creation of your EC2 instance.</p>
<p class="number"><strong><a href="ch18.xhtml#ch18qa7" id="rch18qa7">7.</a> A, B, C.</strong> Chef, Puppet, and Ansible are the configuration management tools that can be used to bootstrap in the AWS environment.</p>
<p class="number"><strong><a href="ch18.xhtml#ch18qa8" id="rch18qa8">8.</a> B.</strong> If you set DeletionPolicy to Retain for any resource, it will be retained after the deletion of stack.</p>
<p class="number"><strong><a href="ch18.xhtml#ch18qa9" id="rch18qa9">9.</a> A.</strong> The AWS CloudFormation registry is a managed service that enables you to discover, register, and use private third-party resource providers and public AWS resources.</p>
<p class="number1"><strong><a href="ch18.xhtml#ch18qa10" id="rch18qa10">10.</a> A.</strong> Change sets can be used to verify the impact of your changes to the stack without executing them.</p>
<h3 class="h3" id="ch18lev1sec3">Additional Resources</h3>
<p class="bulleta">• <strong>AWS CloudFormation</strong>   The recommended documentation for any AWS services, including Amazon CloudFormation, is the official AWS documentation, where you always can get the most up-to-date information</p>
<p class="bulletc"><img alt="images" src="p0478-01.jpg"/></p>
<p class="bulleta">• <strong>AWS CloudFormation Blog</strong>   This is the official blog for AWS CloudFormation, which has all the latest information in one place.</p>
<p class="bulletc"><img alt="images" src="p0478-02.jpg"/></p>
</section>
</body>
</html>